<Data>
    <Table Id="UnaryFloatOpTable">
        <ParameterTypes>
            <ParameterType Name="ShaderOp.Target">String</ParameterType>
            <ParameterType Name="ShaderOp.Arguments">String</ParameterType>
            <ParameterType Name="ShaderOp.Text">String</ParameterType>
            <ParameterType Name="Validation.Type">String</ParameterType>
            <ParameterType Name="Validation.Tolerance">double</ParameterType>
            <ParameterType Array="true" Name="Validation.Input1">String</ParameterType>
            <ParameterType Array="true" Name="Validation.Expected1">String</ParameterType>
            <ParameterType Name="Warp.Version">unsigned int</ParameterType>
        </ParameterTypes>
        <Row Name="Log">
            <Parameter Name="Validation.Type">Relative</Parameter>
            <Parameter Name="Validation.Tolerance">21</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SUnaryFPOp {
                float input;
                float output;
            };
            RWStructuredBuffer&lt;SUnaryFPOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SUnaryFPOp l = g_buf[GI];
                l.output = log(l.input);
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>NaN</Value>
                <Value>-Inf</Value>
                <Value>-denorm</Value>
                <Value>-0</Value>
                <Value>0</Value>
                <Value>denorm</Value>
                <Value>Inf</Value>
                <Value>-1</Value>
                <Value>2.718281828</Value>
                <Value>7.389056</Value>
                <Value>100</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>NaN</Value>
                <Value>NaN</Value>
                <Value>-Inf</Value>
                <Value>-Inf</Value>
                <Value>-Inf</Value>
                <Value>-Inf</Value>
                <Value>Inf</Value>
                <Value>NaN</Value>
                <Value>1.0</Value>
                <Value>1.99999998</Value>
                <Value>4.6051701</Value>
            </Parameter>
        </Row>
        <Row Name="Atan">
            <Parameter Name="Validation.Type">Epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0.0008</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SUnaryFPOp {
                float input;
                float output;
            };
            RWStructuredBuffer&lt;SUnaryFPOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SUnaryFPOp l = g_buf[GI];
                l.output = atan(l.input);
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>NaN</Value>
                <Value>-Inf</Value>
                <Value>-denorm</Value>
                <Value>-0</Value>
                <Value>0</Value>
                <Value>denorm</Value>
                <Value>Inf</Value>
                <Value>1</Value>
                <Value>-1</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>NaN</Value>
                <Value>-1.570796</Value>
                <Value>0.0</Value>
                <Value>0.0</Value>
                <Value>0.0</Value>
                <Value>0.0</Value>
                <Value>1.570796</Value>
                <Value>0.785398163</Value>
                <Value>-0.785398163</Value>
            </Parameter>
            <Parameter Name="Warp.Version">16202</Parameter>
        </Row>
        <Row Name="Tan">
            <Parameter Name="Validation.Type">Epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0.0008</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SUnaryFPOp {
                float input;
                float output;
            };
            RWStructuredBuffer&lt;SUnaryFPOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SUnaryFPOp l = g_buf[GI];
                l.output = tan(l.input);
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>NaN</Value>
                <Value>-Inf</Value>
                <Value>-denorm</Value>
                <Value>-0</Value>
                <Value>0</Value>
                <Value>denorm</Value>
                <Value>Inf</Value>
                <Value>-314.16</Value>
                <Value>314.16</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>NaN</Value>
                <Value>NaN</Value>
                <Value>-0.0</Value>
                <Value>-0.0</Value>
                <Value>0.0</Value>
                <Value>0.0</Value>
                <Value>NaN</Value>
                <Value>-0.000735</Value>
                <Value>0.000735</Value>
            </Parameter>
        </Row>
        <Row Name="Round_ni">
            <Parameter Name="Validation.Type">Epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SUnaryFPOp {
                float input;
                float output;
            };
            RWStructuredBuffer&lt;SUnaryFPOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SUnaryFPOp l = g_buf[GI];
                l.output = floor(l.input);
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>NaN</Value>
                <Value>-Inf</Value>
                <Value>-denorm</Value>
                <Value>-0</Value>
                <Value>0</Value>
                <Value>denorm</Value>
                <Value>Inf</Value>
                <Value>10.0</Value>
                <Value>10.4</Value>
                <Value>10.5</Value>
                <Value>10.6</Value>
                <Value>-10.0</Value>
                <Value>-10.4</Value>
                <Value>-10.5</Value>
                <Value>-10.6</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>NaN</Value>
                <Value>-Inf</Value>
                <Value>-0</Value>
                <Value>-0</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>Inf</Value>
                <Value>10.0</Value>
                <Value>10.0</Value>
                <Value>10.0</Value>
                <Value>10.0</Value>
                <Value>-10.0</Value>
                <Value>-11.0</Value>
                <Value>-11.0</Value>
                <Value>-11.0</Value>
            </Parameter>
        </Row>
        <Row Name="Round_ne">
            <Parameter Name="Validation.Type">Epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SUnaryFPOp {
                float input;
                float output;
            };
            RWStructuredBuffer&lt;SUnaryFPOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SUnaryFPOp l = g_buf[GI];
                l.output = round(l.input);
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>NaN</Value>
                <Value>-Inf</Value>
                <Value>-denorm</Value>
                <Value>-0</Value>
                <Value>0</Value>
                <Value>denorm</Value>
                <Value>Inf</Value>
                <Value>10.0</Value>
                <Value>10.4</Value>
                <Value>10.5</Value>
                <Value>10.6</Value>
                <Value>11.5</Value>
                <Value>-10.0</Value>
                <Value>-10.4</Value>
                <Value>-10.5</Value>
                <Value>-10.6</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>NaN</Value>
                <Value>-Inf</Value>
                <Value>-0</Value>
                <Value>-0</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>Inf</Value>
                <Value>10.0</Value>
                <Value>10.0</Value>
                <Value>10.0</Value>
                <Value>11.0</Value>
                <Value>12.0</Value>
                <Value>-10.0</Value>
                <Value>-10.0</Value>
                <Value>-10.0</Value>
                <Value>-11.0</Value>
            </Parameter>
        </Row>
        <Row Name="Round_z">
            <Parameter Name="Validation.Type">Epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SUnaryFPOp {
                float input;
                float output;
            };
            RWStructuredBuffer&lt;SUnaryFPOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SUnaryFPOp l = g_buf[GI];
                l.output = trunc(l.input);
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>NaN</Value>
                <Value>-Inf</Value>
                <Value>-denorm</Value>
                <Value>-0</Value>
                <Value>0</Value>
                <Value>denorm</Value>
                <Value>Inf</Value>
                <Value>10.0</Value>
                <Value>10.4</Value>
                <Value>10.5</Value>
                <Value>10.6</Value>
                <Value>-10.0</Value>
                <Value>-10.4</Value>
                <Value>-10.5</Value>
                <Value>-10.6</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>NaN</Value>
                <Value>-Inf</Value>
                <Value>-0</Value>
                <Value>-0</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>Inf</Value>
                <Value>10.0</Value>
                <Value>10.0</Value>
                <Value>10.0</Value>
                <Value>10.0</Value>
                <Value>-10.0</Value>
                <Value>-10.0</Value>
                <Value>-10.0</Value>
                <Value>-10.0</Value>
            </Parameter>
        </Row>
        <Row Name="IsInf">
            <Parameter Name="Validation.Type">Epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SUnaryFPOp {
                float input;
                float output;
            };
            RWStructuredBuffer&lt;SUnaryFPOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SUnaryFPOp l = g_buf[GI];
                if (isinf(l.input))
                    l.output = 1;
                else
                    l.output = 0;
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>NaN</Value>
                <Value>-Inf</Value>
                <Value>-denorm</Value>
                <Value>-0</Value>
                <Value>0</Value>
                <Value>denorm</Value>
                <Value>Inf</Value>
                <Value>1.0</Value>
                <Value>-1.0</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>0</Value>
                <Value>1</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>1</Value>
                <Value>0</Value>
                <Value>0</Value>
            </Parameter>
        </Row>
        <Row Name="Exp">
            <Parameter Name="Validation.Type">Relative</Parameter>
            <Parameter Name="Validation.Tolerance">21</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SUnaryFPOp {
                float input;
                float output;
            };
            RWStructuredBuffer&lt;SUnaryFPOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SUnaryFPOp l = g_buf[GI];
                l.output = exp(l.input);
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>NaN</Value>
                <Value>-Inf</Value>
                <Value>-denorm</Value>
                <Value>-0</Value>
                <Value>0</Value>
                <Value>denorm</Value>
                <Value>Inf</Value>
                <Value>-1</Value>
                <Value>10</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>NaN</Value>
                <Value>0</Value>
                <Value>1</Value>
                <Value>1</Value>
                <Value>1</Value>
                <Value>1</Value>
                <Value>Inf</Value>
                <Value>0.367879441</Value>
                <Value>22026.46579</Value>
            </Parameter>
        </Row>
        <Row Name="Frc">
            <Parameter Name="Validation.Type">Epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0.0008</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SUnaryFPOp {
                float input;
                float output;
            };
            RWStructuredBuffer&lt;SUnaryFPOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SUnaryFPOp l = g_buf[GI];
                l.output = frac(l.input);
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>NaN</Value>
                <Value>-Inf</Value>
                <Value>-denorm</Value>
                <Value>-0</Value>
                <Value>0</Value>
                <Value>denorm</Value>
                <Value>Inf</Value>
                <Value>-1</Value>
                <Value>2.718280</Value>
                <Value>1000.599976</Value>
                <Value>-7.389</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>NaN</Value>
                <Value>NaN</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>NaN</Value>
                <Value>0</Value>
                <Value>0.718280</Value>
                <Value>0.599976</Value>
                <Value>0.611</Value>
            </Parameter>
        </Row>
        <Row Name="Asin">
            <Parameter Name="Validation.Type">Epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0.0008</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SUnaryFPOp {
                float input;
                float output;
            };
            RWStructuredBuffer&lt;SUnaryFPOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SUnaryFPOp l = g_buf[GI];
                l.output = asin(l.input);
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>NaN</Value>
                <Value>-Inf</Value>
                <Value>-denorm</Value>
                <Value>-0</Value>
                <Value>0</Value>
                <Value>denorm</Value>
                <Value>Inf</Value>
                <Value>1</Value>
                <Value>-1</Value>
                <Value>1.5</Value>
                <Value>-1.5</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>NaN</Value>
                <Value>NaN</Value>
                <Value>0.0</Value>
                <Value>0.0</Value>
                <Value>0.0</Value>
                <Value>0.0</Value>
                <Value>NaN</Value>
                <Value>1.570796</Value>
                <Value>-1.570796</Value>
                <Value>NaN</Value>
                <Value>NaN</Value>
            </Parameter>
        </Row>
        <Row Name="Htan">
            <Parameter Name="Validation.Type">Epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0.0008</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SUnaryFPOp {
                float input;
                float output;
            };
            RWStructuredBuffer&lt;SUnaryFPOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SUnaryFPOp l = g_buf[GI];
                l.output = tanh(l.input);
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>NaN</Value>
                <Value>-Inf</Value>
                <Value>-denorm</Value>
                <Value>-0</Value>
                <Value>0</Value>
                <Value>denorm</Value>
                <Value>Inf</Value>
                <Value>1</Value>
                <Value>-1</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>NaN</Value>
                <Value>-1</Value>
                <Value>-0.0</Value>
                <Value>-0.0</Value>
                <Value>0.0</Value>
                <Value>0.0</Value>
                <Value>1</Value>
                <Value>0.761594</Value>
                <Value>-0.761594</Value>
            </Parameter>
            <Parameter Name="Warp.Version">16202</Parameter>
        </Row>
        <Row Name="Sqrt">
            <Parameter Name="Validation.Type">ulp</Parameter>
            <Parameter Name="Validation.Tolerance">1</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SUnaryFPOp {
                float input;
                float output;
            };
            RWStructuredBuffer&lt;SUnaryFPOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SUnaryFPOp l = g_buf[GI];
                l.output = sqrt(l.input);
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>NaN</Value>
                <Value>-Inf</Value>
                <Value>-denorm</Value>
                <Value>-0</Value>
                <Value>0</Value>
                <Value>denorm</Value>
                <Value>Inf</Value>
                <Value>-1</Value>
                <Value>2</Value>
                <Value>16.0</Value>
                <Value>256.0</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>NaN</Value>
                <Value>NaN</Value>
                <Value>-0</Value>
                <Value>-0</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>Inf</Value>
                <Value>NaN</Value>
                <Value>1.41421356237</Value>
                <Value>4.0</Value>
                <Value>16.0</Value>
            </Parameter>
        </Row>
        <Row Name="Hcos">
            <Parameter Name="Validation.Type">Epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0.0008</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SUnaryFPOp {
                float input;
                float output;
            };
            RWStructuredBuffer&lt;SUnaryFPOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SUnaryFPOp l = g_buf[GI];
                l.output = cosh(l.input);
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>NaN</Value>
                <Value>-Inf</Value>
                <Value>-denorm</Value>
                <Value>-0</Value>
                <Value>0</Value>
                <Value>denorm</Value>
                <Value>Inf</Value>
                <Value>1</Value>
                <Value>-1</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>NaN</Value>
                <Value>Inf</Value>
                <Value>1.0</Value>
                <Value>1.0</Value>
                <Value>1.0</Value>
                <Value>1.0</Value>
                <Value>Inf</Value>
                <Value>1.543081</Value>
                <Value>1.543081</Value>
            </Parameter>
        </Row>
        <Row Name="Round_pi">
            <Parameter Name="Validation.Type">Epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SUnaryFPOp {
                float input;
                float output;
            };
            RWStructuredBuffer&lt;SUnaryFPOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SUnaryFPOp l = g_buf[GI];
                l.output = ceil(l.input);
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>NaN</Value>
                <Value>-Inf</Value>
                <Value>-denorm</Value>
                <Value>-0</Value>
                <Value>0</Value>
                <Value>denorm</Value>
                <Value>Inf</Value>
                <Value>10.0</Value>
                <Value>10.4</Value>
                <Value>10.5</Value>
                <Value>10.6</Value>
                <Value>-10.0</Value>
                <Value>-10.4</Value>
                <Value>-10.5</Value>
                <Value>-10.6</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>NaN</Value>
                <Value>-Inf</Value>
                <Value>-0</Value>
                <Value>-0</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>Inf</Value>
                <Value>10.0</Value>
                <Value>11.0</Value>
                <Value>11.0</Value>
                <Value>11.0</Value>
                <Value>-10.0</Value>
                <Value>-10.0</Value>
                <Value>-10.0</Value>
                <Value>-10.0</Value>
            </Parameter>
        </Row>
        <Row Name="Acos">
            <Parameter Name="Validation.Type">Epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0.0008</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SUnaryFPOp {
                float input;
                float output;
            };
            RWStructuredBuffer&lt;SUnaryFPOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SUnaryFPOp l = g_buf[GI];
                l.output = acos(l.input);
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>NaN</Value>
                <Value>-Inf</Value>
                <Value>-denorm</Value>
                <Value>-0</Value>
                <Value>0</Value>
                <Value>denorm</Value>
                <Value>Inf</Value>
                <Value>1</Value>
                <Value>-1</Value>
                <Value>1.5</Value>
                <Value>-1.5</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>NaN</Value>
                <Value>NaN</Value>
                <Value>1.570796</Value>
                <Value>1.570796</Value>
                <Value>1.570796</Value>
                <Value>1.570796</Value>
                <Value>NaN</Value>
                <Value>0</Value>
                <Value>3.1415926</Value>
                <Value>NaN</Value>
                <Value>NaN</Value>
            </Parameter>
        </Row>
        <Row Name="Hsin">
            <Parameter Name="Validation.Type">Epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0.0008</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SUnaryFPOp {
                float input;
                float output;
            };
            RWStructuredBuffer&lt;SUnaryFPOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SUnaryFPOp l = g_buf[GI];
                l.output = sinh(l.input);
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>NaN</Value>
                <Value>-Inf</Value>
                <Value>-denorm</Value>
                <Value>-0</Value>
                <Value>0</Value>
                <Value>denorm</Value>
                <Value>Inf</Value>
                <Value>1</Value>
                <Value>-1</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>NaN</Value>
                <Value>-Inf</Value>
                <Value>0.0</Value>
                <Value>0.0</Value>
                <Value>0.0</Value>
                <Value>0.0</Value>
                <Value>Inf</Value>
                <Value>1.175201</Value>
                <Value>-1.175201</Value>
            </Parameter>
        </Row>
        <Row Name="IsFinite">
            <Parameter Name="Validation.Type">Epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SUnaryFPOp {
                float input;
                float output;
            };
            RWStructuredBuffer&lt;SUnaryFPOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SUnaryFPOp l = g_buf[GI];
                if (isfinite(l.input))
                    l.output = 1;
                else
                    l.output = 0;
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>NaN</Value>
                <Value>-Inf</Value>
                <Value>-denorm</Value>
                <Value>-0</Value>
                <Value>0</Value>
                <Value>denorm</Value>
                <Value>Inf</Value>
                <Value>1.0</Value>
                <Value>-1.0</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>0</Value>
                <Value>0</Value>
                <Value>1</Value>
                <Value>1</Value>
                <Value>1</Value>
                <Value>1</Value>
                <Value>0</Value>
                <Value>1</Value>
                <Value>1</Value>
            </Parameter>
            <Parameter Name="Warp.Version">16202</Parameter>
        </Row>
        <Row Name="IsNaN">
            <Parameter Name="Validation.Type">Epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SUnaryFPOp {
                float input;
                float output;
            };
            RWStructuredBuffer&lt;SUnaryFPOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SUnaryFPOp l = g_buf[GI];
                if (isnan(l.input))
                    l.output = 1;
                else
                    l.output = 0;
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>NaN</Value>
                <Value>-Inf</Value>
                <Value>-denorm</Value>
                <Value>-0</Value>
                <Value>0</Value>
                <Value>denorm</Value>
                <Value>Inf</Value>
                <Value>1.0</Value>
                <Value>-1.0</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>1</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>0</Value>
            </Parameter>
        </Row>
        <Row Name="Sin">
            <Parameter Name="Validation.Type">Epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0.0008</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SUnaryFPOp {
                float input;
                float output;
            };
            RWStructuredBuffer&lt;SUnaryFPOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            [RootSignature("RootFlags(0), UAV(u0)")]
            void main(uint GI : SV_GroupIndex) {
                SUnaryFPOp l = g_buf[GI];
                l.output = sin(l.input);
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>NaN</Value>
                <Value>-Inf</Value>
                <Value>-denorm</Value>
                <Value>-0</Value>
                <Value>0</Value>
                <Value>denorm</Value>
                <Value>Inf</Value>
                <Value>-314.16</Value>
                <Value>314.16</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>NaN</Value>
                <Value>NaN</Value>
                <Value>-0</Value>
                <Value>-0</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>NaN</Value>
                <Value>-0.0007346401</Value>
                <Value>0.0007346401</Value>
            </Parameter>
        </Row>
        <Row Name="Rsqrt">
            <Parameter Name="Validation.Type">ulp</Parameter>
            <Parameter Name="Validation.Tolerance">1</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SUnaryFPOp {
                float input;
                float output;
            };
            RWStructuredBuffer&lt;SUnaryFPOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SUnaryFPOp l = g_buf[GI];
                l.output = rsqrt(l.input);
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>NaN</Value>
                <Value>-Inf</Value>
                <Value>-denorm</Value>
                <Value>-0</Value>
                <Value>0</Value>
                <Value>denorm</Value>
                <Value>Inf</Value>
                <Value>-1</Value>
                <Value>16.0</Value>
                <Value>256.0</Value>
                <Value>65536.0</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>NaN</Value>
                <Value>NaN</Value>
                <Value>-Inf</Value>
                <Value>-Inf</Value>
                <Value>Inf</Value>
                <Value>Inf</Value>
                <Value>0</Value>
                <Value>NaN</Value>
                <Value>0.25</Value>
                <Value>0.0625</Value>
                <Value>0.00390625</Value>
            </Parameter>
        </Row>
        <Row Name="Cos">
            <Parameter Name="Validation.Type">Epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0.0008</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SUnaryFPOp {
                float input;
                float output;
            };
            RWStructuredBuffer&lt;SUnaryFPOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SUnaryFPOp l = g_buf[GI];
                l.output = cos(l.input);
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>NaN</Value>
                <Value>-Inf</Value>
                <Value>-denorm</Value>
                <Value>-0</Value>
                <Value>0</Value>
                <Value>denorm</Value>
                <Value>Inf</Value>
                <Value>-314.16</Value>
                <Value>314.16</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>NaN</Value>
                <Value>NaN</Value>
                <Value>1.0</Value>
                <Value>1.0</Value>
                <Value>1.0</Value>
                <Value>1.0</Value>
                <Value>NaN</Value>
                <Value>0.99999973015</Value>
                <Value>0.99999973015</Value>
            </Parameter>
        </Row>
        <Row Name="FAbs">
            <Parameter Name="Validation.Type">Epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SUnaryFPOp {
                float input;
                float output;
            };
            RWStructuredBuffer&lt;SUnaryFPOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SUnaryFPOp l = g_buf[GI];
                l.output = abs(l.input);
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>NaN</Value>
                <Value>-Inf</Value>
                <Value>-denorm</Value>
                <Value>-0</Value>
                <Value>0</Value>
                <Value>denorm</Value>
                <Value>Inf</Value>
                <Value>1.0</Value>
                <Value>-1.0</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>NaN</Value>
                <Value>Inf</Value>
                <Value>denorm</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>denorm</Value>
                <Value>Inf</Value>
                <Value>1</Value>
                <Value>1</Value>
            </Parameter>
        </Row>
    </Table>
    <Table Id="BinaryFloatOpTable">
        <ParameterTypes>
            <ParameterType Name="ShaderOp.Target">String</ParameterType>
            <ParameterType Name="ShaderOp.Arguments">String</ParameterType>
            <ParameterType Name="ShaderOp.Text">String</ParameterType>
            <ParameterType Name="Validation.Type">String</ParameterType>
            <ParameterType Name="Validation.Tolerance">double</ParameterType>
            <ParameterType Array="true" Name="Validation.Input1">String</ParameterType>
            <ParameterType Array="true" Name="Validation.Input2">String</ParameterType>
            <ParameterType Array="true" Name="Validation.Expected1">String</ParameterType>
            <ParameterType Array="true" Name="Validation.Expected2">String</ParameterType>
        </ParameterTypes>
        <Row Name="FMul">
            <Parameter Name="Validation.Type">ulp</Parameter>
            <Parameter Name="Validation.Tolerance">1</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SBinaryFPOp {
                float input1;
                float input2;
                float output1;
                float output2;
            };
            RWStructuredBuffer&lt;SBinaryFPOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SBinaryFPOp l = g_buf[GI];
                l.output1 = l.input1 * l.input2;
                g_buf[GI] = l;
            }; </Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>-1.0</Value>
                <Value>5.5</Value>
                <Value>1.0000001</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>4</Value>
                <Value>1.25</Value>
                <Value>2.0</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>-4.0</Value>
                <Value>6.875</Value>
                <Value>2.0000002</Value>
            </Parameter>
        </Row>
        <Row Name="FAdd">
            <Parameter Name="Validation.Type">ulp</Parameter>
            <Parameter Name="Validation.Tolerance">1</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SBinaryFPOp {
                float input1;
                float input2;
                float output1;
                float output2;
            };
            RWStructuredBuffer&lt;SBinaryFPOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SBinaryFPOp l = g_buf[GI];
                l.output1 = l.input1 + l.input2;
                g_buf[GI] = l;
            }; </Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>-1.0</Value>
                <Value>1.0</Value>
                <Value>32.5</Value>
                <Value>1.0000001000</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>4</Value>
                <Value>5.5</Value>
                <Value>334.7</Value>
                <Value>0.5000001000</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>3.0</Value>
                <Value>6.5</Value>
                <Value>367.2</Value>
                <Value>1.5000002000</Value>
            </Parameter>
        </Row>
        <Row Name="FDiv">
            <Parameter Name="Validation.Type">ulp</Parameter>
            <Parameter Name="Validation.Tolerance">1</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SBinaryFPOp {
                float input1;
                float input2;
                float output1;
                float output2;
            };
            RWStructuredBuffer&lt;SBinaryFPOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SBinaryFPOp l = g_buf[GI];
                l.output1 = l.input1 / l.input2;
                g_buf[GI] = l;
            }; </Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>-1.0</Value>
                <Value>5.5</Value>
                <Value>1.0000001</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>4</Value>
                <Value>1.25</Value>
                <Value>2.0</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>-0.25</Value>
                <Value>4.4</Value>
                <Value>0.50000006</Value>
            </Parameter>
        </Row>
        <Row Name="FMin">
            <Parameter Name="Validation.Type">epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SBinaryFPOp {
                float input1;
                float input2;
                float output1;
                float output2;
            };
            RWStructuredBuffer&lt;SBinaryFPOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SBinaryFPOp l = g_buf[GI];
                l.output1 = min(l.input1, l.input2);
                l.output2 = max(l.input1, l.input2);
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>-inf</Value>
                <Value>-inf</Value>
                <Value>-inf</Value>
                <Value>-inf</Value>
                <Value>inf</Value>
                <Value>inf</Value>
                <Value>inf</Value>
                <Value>inf</Value>
                <Value>NaN</Value>
                <Value>NaN</Value>
                <Value>NaN</Value>
                <Value>NaN</Value>
                <Value>1.0</Value>
                <Value>1.0</Value>
                <Value>-1.0</Value>
                <Value>-1.0</Value>
                <Value>1.0</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>-inf</Value>
                <Value>inf</Value>
                <Value>1.0</Value>
                <Value>NaN</Value>
                <Value>-inf</Value>
                <Value>inf</Value>
                <Value>1.0</Value>
                <Value>NaN</Value>
                <Value>-inf</Value>
                <Value>inf</Value>
                <Value>1.0</Value>
                <Value>NaN</Value>
                <Value>-inf</Value>
                <Value>inf</Value>
                <Value>1.0</Value>
                <Value>NaN</Value>
                <Value>-1.0</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>-inf</Value>
                <Value>-inf</Value>
                <Value>-inf</Value>
                <Value>-inf</Value>
                <Value>-inf</Value>
                <Value>inf</Value>
                <Value>1.0</Value>
                <Value>inf</Value>
                <Value>-inf</Value>
                <Value>inf</Value>
                <Value>1.0</Value>
                <Value>NaN</Value>
                <Value>-inf</Value>
                <Value>1.0</Value>
                <Value>-1.0</Value>
                <Value>-1.0</Value>
                <Value>-1.0</Value>
            </Parameter>
            <Parameter Name="Validation.Expected2">
                <Value>-inf</Value>
                <Value>inf</Value>
                <Value>1.0</Value>
                <Value>-inf</Value>
                <Value>inf</Value>
                <Value>inf</Value>
                <Value>inf</Value>
                <Value>inf</Value>
                <Value>-inf</Value>
                <Value>inf</Value>
                <Value>1.0</Value>
                <Value>NaN</Value>
                <Value>1.0</Value>
                <Value>inf</Value>
                <Value>1.0</Value>
                <Value>-1.0</Value>
                <Value>1.0</Value>
            </Parameter>
        </Row>
        <Row Name="FSub">
            <Parameter Name="Validation.Type">ulp</Parameter>
            <Parameter Name="Validation.Tolerance">1</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SBinaryFPOp {
                float input1;
                float input2;
                float output1;
                float output2;
            };
            RWStructuredBuffer&lt;SBinaryFPOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SBinaryFPOp l = g_buf[GI];
                l.output1 = l.input1 - l.input2;
                g_buf[GI] = l;
            }; </Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>-1.0</Value>
                <Value>5.5</Value>
                <Value>32.5</Value>
                <Value>1.0000001000</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>4</Value>
                <Value>1.25</Value>
                <Value>334.7</Value>
                <Value>0.5000001000</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>-5</Value>
                <Value>4.25</Value>
                <Value>-302.2</Value>
                <Value>0.5000</Value>
            </Parameter>
        </Row>
    </Table>
    <Table Id="TertiaryFloatOpTable">
        <ParameterTypes>
            <ParameterType Name="ShaderOp.Target">String</ParameterType>
            <ParameterType Name="ShaderOp.Arguments">String</ParameterType>
            <ParameterType Name="ShaderOp.Text">String</ParameterType>
            <ParameterType Name="Validation.Type">String</ParameterType>
            <ParameterType Name="Validation.Tolerance">double</ParameterType>
            <ParameterType Array="true" Name="Validation.Input1">String</ParameterType>
            <ParameterType Array="true" Name="Validation.Input2">String</ParameterType>
            <ParameterType Array="true" Name="Validation.Input3">String</ParameterType>
            <ParameterType Array="true" Name="Validation.Expected1">String</ParameterType>
        </ParameterTypes>
        <Row Name="FMad">
            <Parameter Name="Validation.Type">ulp</Parameter>
            <Parameter Name="Validation.Tolerance">1</Parameter>
            <Parameter Name="ShaderOp.Text"> struct STertiaryFloatOp {
                    float input1;
                    float input2;
                    float input3;
                    float output;
                };
                RWStructuredBuffer&lt;STertiaryFloatOp&gt; g_buf : register(u0);
                [numthreads(8,8,1)]
                void main(uint GI : SV_GroupIndex) {
                    STertiaryFloatOp l = g_buf[GI];
                    l.output = mad(l.input1, l.input2, l.input3);
                    g_buf[GI] = l;
                };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>NaN</Value>
                <Value>-Inf</Value>
                <Value>-denorm</Value>
                <Value>-0</Value>
                <Value>0</Value>
                <Value>denorm</Value>
                <Value>Inf</Value>
                <Value>1.0</Value>
                <Value>-1.0</Value>
                <Value>0</Value>
                <Value>1</Value>
                <Value>1.5</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>NaN</Value>
                <Value>-Inf</Value>
                <Value>-denorm</Value>
                <Value>-0</Value>
                <Value>0</Value>
                <Value>denorm</Value>
                <Value>Inf</Value>
                <Value>1.0</Value>
                <Value>-1.0</Value>
                <Value>0</Value>
                <Value>1</Value>
                <Value>10</Value>
            </Parameter>
            <Parameter Name="Validation.Input3">
                <Value>NaN</Value>
                <Value>-Inf</Value>
                <Value>-denorm</Value>
                <Value>-0</Value>
                <Value>0</Value>
                <Value>denorm</Value>
                <Value>Inf</Value>
                <Value>1.0</Value>
                <Value>-1.0</Value>
                <Value>1</Value>
                <Value>0</Value>
                <Value>-5.5</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>NaN</Value>
                <Value>NaN</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>Inf</Value>
                <Value>2</Value>
                <Value>0</Value>
                <Value>1</Value>
                <Value>1</Value>
                <Value>9.5</Value>
            </Parameter>
        </Row>
    </Table>
    <Table Id="UnaryIntOpTable">
        <ParameterTypes>
            <ParameterType Name="ShaderOp.Target">String</ParameterType>
            <ParameterType Name="ShaderOp.Arguments">String</ParameterType>
            <ParameterType Name="ShaderOp.Text">String</ParameterType>
            <ParameterType Name="Validation.Type">String</ParameterType>
            <ParameterType Name="Validation.Tolerance">double</ParameterType>
            <ParameterType Array="true" Name="Validation.Input1">String</ParameterType>
            <ParameterType Array="true" Name="Validation.Expected1">String</ParameterType>
        </ParameterTypes>
        <Row Name="FirstbitLo">
            <Parameter Name="Validation.Type">Epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SUnaryIntOp {
                int input;
                int output;
            };
            RWStructuredBuffer&lt;SUnaryIntOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SUnaryIntOp l = g_buf[GI];
                l.output = firstbitlow(l.input);
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>-2147483648</Value>
                <Value>-65536</Value>
                <Value>-8</Value>
                <Value>-1</Value>
                <Value>0</Value>
                <Value>1</Value>
                <Value>8</Value>
                <Value>65536</Value>
                <Value>2147483647</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>31</Value>
                <Value>16</Value>
                <Value>3</Value>
                <Value>0</Value>
                <Value>-1</Value>
                <Value>0</Value>
                <Value>3</Value>
                <Value>16</Value>
                <Value>0</Value>
            </Parameter>
        </Row>
        <Row Name="FirstbitSHi">
            <Parameter Name="Validation.Type">Epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SUnaryIntOp {
                int input;
                int output;
            };
            RWStructuredBuffer&lt;SUnaryIntOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SUnaryIntOp l = g_buf[GI];
                l.output = firstbithigh(l.input);
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>-2147483648</Value>
                <Value>-65536</Value>
                <Value>-8</Value>
                <Value>-1</Value>
                <Value>0</Value>
                <Value>1</Value>
                <Value>8</Value>
                <Value>65536</Value>
                <Value>2147483647</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>30</Value>
                <Value>15</Value>
                <Value>2</Value>
                <Value>-1</Value>
                <Value>-1</Value>
                <Value>0</Value>
                <Value>3</Value>
                <Value>16</Value>
                <Value>30</Value>
            </Parameter>
        </Row>
        <Row Name="Countbits">
            <Parameter Name="Validation.Type">Epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SUnaryIntOp {
                int input;
                int output;
            };
            RWStructuredBuffer&lt;SUnaryIntOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SUnaryIntOp l = g_buf[GI];
                l.output = countbits(l.input);
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>-2147483648</Value>
                <Value>-65536</Value>
                <Value>-8</Value>
                <Value>-1</Value>
                <Value>0</Value>
                <Value>1</Value>
                <Value>8</Value>
                <Value>65536</Value>
                <Value>2147483647</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>1</Value>
                <Value>16</Value>
                <Value>29</Value>
                <Value>32</Value>
                <Value>0</Value>
                <Value>1</Value>
                <Value>1</Value>
                <Value>1</Value>
                <Value>31</Value>
            </Parameter>
        </Row>
        <Row Name="Bfrev">
            <Parameter Name="Validation.Type">Epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SUnaryIntOp {
                int input;
                int output;
            };
            RWStructuredBuffer&lt;SUnaryIntOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SUnaryIntOp l = g_buf[GI];
                l.output = reversebits(l.input);
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>-2147483648</Value>
                <Value>-65536</Value>
                <Value>-8</Value>
                <Value>-1</Value>
                <Value>0</Value>
                <Value>1</Value>
                <Value>8</Value>
                <Value>65536</Value>
                <Value>2147483647</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>1</Value>
                <Value>65535</Value>
                <Value>536870911</Value>
                <Value>-1</Value>
                <Value>0</Value>
                <Value>-2147483648</Value>
                <Value>268435456</Value>
                <Value>32768</Value>
                <Value>-2</Value>
            </Parameter>
        </Row>
    </Table>
    <Table Id="BinaryIntOpTable">
        <ParameterTypes>
            <ParameterType Name="ShaderOp.Target">String</ParameterType>
            <ParameterType Name="ShaderOp.Arguments">String</ParameterType>
            <ParameterType Name="ShaderOp.Text">String</ParameterType>
            <ParameterType Name="Validation.Type">String</ParameterType>
            <ParameterType Name="Validation.Tolerance">double</ParameterType>
            <ParameterType Array="true" Name="Validation.Input1">String</ParameterType>
            <ParameterType Array="true" Name="Validation.Input2">String</ParameterType>
            <ParameterType Array="true" Name="Validation.Expected1">String</ParameterType>
            <ParameterType Array="true" Name="Validation.Expected2">String</ParameterType>
        </ParameterTypes>
        <Row Name="IMul">
            <Parameter Name="Validation.Type">Epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SBinaryIntOp {
                int input1;
                int input2;
                int output1;
                int output2;
            };
            RWStructuredBuffer&lt;SBinaryIntOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SBinaryIntOp l = g_buf[GI];
                l.output1 = l.input1 * l.input2;
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>-2147483648</Value>
                <Value>-10</Value>
                <Value>-1</Value>
                <Value>0</Value>
                <Value>1</Value>
                <Value>10</Value>
                <Value>10000</Value>
                <Value>2147483647</Value>
                <Value>2147483647</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>-10</Value>
                <Value>-10</Value>
                <Value>10</Value>
                <Value>0</Value>
                <Value>256</Value>
                <Value>4</Value>
                <Value>10001</Value>
                <Value>0</Value>
                <Value>2147483647</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>0</Value>
                <Value>100</Value>
                <Value>-10</Value>
                <Value>0</Value>
                <Value>256</Value>
                <Value>40</Value>
                <Value>100010000</Value>
                <Value>0</Value>
                <Value>1</Value>
            </Parameter>
        </Row>
        <Row Name="Shl">
            <Parameter Name="Validation.Type">Epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SBinaryUintOp {
                int input1;
                int input2;
                int output1;
                int output2;
            };
            RWStructuredBuffer&lt;SBinaryUintOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SBinaryUintOp l = g_buf[GI];
                l.output1 = l.input1 &lt;&lt; l.input2;
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>1</Value>
                <Value>1</Value>
                <Value>0x1010</Value>
                <Value>0xa</Value>
                <Value>-1</Value>
                <Value>0x12341234</Value>
                <Value>-1</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>0</Value>
                <Value>259</Value>
                <Value>4</Value>
                <Value>2</Value>
                <Value>0</Value>
                <Value>15</Value>
                <Value>3</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>0x1</Value>
                <Value>0x8</Value>
                <Value>0x10100</Value>
                <Value>0x28</Value>
                <Value>-1</Value>
                <Value>0x091a0000</Value>
                <Value>-8</Value>
            </Parameter>
        </Row>
        <Row Name="Or">
            <Parameter Name="Validation.Type">Epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SBinaryUintOp {
                int input1;
                int input2;
                int output1;
                int output2;
            };
            RWStructuredBuffer&lt;SBinaryUintOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SBinaryUintOp l = g_buf[GI];
                l.output1 = l.input1 | l.input2;
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>0x1</Value>
                <Value>0x01</Value>
                <Value>0x7fff0000</Value>
                <Value>0x11111111</Value>
                <Value>0x137f</Value>
                <Value>0x0</Value>
                <Value>0x12345678</Value>
                <Value>0xa341</Value>
                <Value>-1</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>0x1</Value>
                <Value>0xf0</Value>
                <Value>0x0000ffff</Value>
                <Value>0x22222222</Value>
                <Value>0xec80</Value>
                <Value>0x0</Value>
                <Value>0x00000000</Value>
                <Value>0x3471</Value>
                <Value>-1</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>0x1</Value>
                <Value>0xf1</Value>
                <Value>0x7fffffff</Value>
                <Value>0x33333333</Value>
                <Value>0xffff</Value>
                <Value>0x0</Value>
                <Value>0x12345678</Value>
                <Value>0xb771</Value>
                <Value>-1</Value>
            </Parameter>
        </Row>
        <Row Name="IAdd">
            <Parameter Name="Validation.Type">Epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SBinaryIntOp {
                int input1;
                int input2;
                int output1;
                int output2;
            };
            RWStructuredBuffer&lt;SBinaryIntOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SBinaryIntOp l = g_buf[GI];
                l.output1 = l.input1 + l.input2;
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>-2147483648</Value>
                <Value>-10</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>10</Value>
                <Value>2147483647</Value>
                <Value>486</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>0</Value>
                <Value>10</Value>
                <Value>-10</Value>
                <Value>10</Value>
                <Value>10</Value>
                <Value>0</Value>
                <Value>54238</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>-2147483648</Value>
                <Value>0</Value>
                <Value>-10</Value>
                <Value>10</Value>
                <Value>20</Value>
                <Value>2147483647</Value>
                <Value>54724</Value>
            </Parameter>
        </Row>
        <Row Name="LShr">
            <Parameter Name="Validation.Type">Epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SBinaryUintOp {
                int input1;
                int input2;
                int output1;
                int output2;
            };
            RWStructuredBuffer&lt;SBinaryUintOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SBinaryUintOp l = g_buf[GI];
                l.output1 = l.input1 &gt;&gt; l.input2;
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>1</Value>
                <Value>1</Value>
                <Value>0xffff</Value>
                <Value>0x7fffffff</Value>
                <Value>0x70001234</Value>
                <Value>0x12340ab3</Value>
                <Value>0x7fffffff</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>0</Value>
                <Value>1</Value>
                <Value>4</Value>
                <Value>30</Value>
                <Value>15</Value>
                <Value>16</Value>
                <Value>1</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>1</Value>
                <Value>0</Value>
                <Value>0xfff</Value>
                <Value>1</Value>
                <Value>0xe000</Value>
                <Value>0x1234</Value>
                <Value>0x3fffffff</Value>
            </Parameter>
        </Row>
        <Row Name="IMax">
            <Parameter Name="Validation.Type">Epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SBinaryIntOp {
                int input1;
                int input2;
                int output1;
                int output2;
            };
            RWStructuredBuffer&lt;SBinaryIntOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SBinaryIntOp l = g_buf[GI];
                l.output1 = max(l.input1, l.input2);
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>-2147483648</Value>
                <Value>-10</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>10</Value>
                <Value>2147483647</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>0</Value>
                <Value>10</Value>
                <Value>-10</Value>
                <Value>10</Value>
                <Value>10</Value>
                <Value>0</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>0</Value>
                <Value>10</Value>
                <Value>0</Value>
                <Value>10</Value>
                <Value>10</Value>
                <Value>2147483647</Value>
            </Parameter>
        </Row>
        <Row Name="ISub">
            <Parameter Name="Validation.Type">Epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SBinaryIntOp {
                int input1;
                int input2;
                int output1;
                int output2;
            };
            RWStructuredBuffer&lt;SBinaryIntOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SBinaryIntOp l = g_buf[GI];
                l.output1 = l.input1 - l.input2;
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>-2147483648</Value>
                <Value>-10</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>10</Value>
                <Value>2147483647</Value>
                <Value>486</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>0</Value>
                <Value>10</Value>
                <Value>-10</Value>
                <Value>10</Value>
                <Value>10</Value>
                <Value>0</Value>
                <Value>54238</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>-2147483648</Value>
                <Value>-20</Value>
                <Value>10</Value>
                <Value>-10</Value>
                <Value>0</Value>
                <Value>2147483647</Value>
                <Value>-53752</Value>
            </Parameter>
        </Row>
        <Row Name="IDiv">
            <Parameter Name="Validation.Type">Epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SBinaryUintOp {
                int input1;
                int input2;
                int output1;
                int output2;
            };
            RWStructuredBuffer&lt;SBinaryUintOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SBinaryUintOp l = g_buf[GI];
                l.output1 = l.input1 / l.input2;
                l.output2 = l.input1 % l.input2;
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>1</Value>
                <Value>1</Value>
                <Value>10</Value>
                <Value>10000</Value>
                <Value>2147483647</Value>
                <Value>2147483647</Value>
                <Value>-1</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>1</Value>
                <Value>256</Value>
                <Value>4</Value>
                <Value>10001</Value>
                <Value>2</Value>
                <Value>2147483647</Value>
                <Value>1</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>1</Value>
                <Value>0</Value>
                <Value>2</Value>
                <Value>0</Value>
                <Value>1073741823</Value>
                <Value>1</Value>
                <Value>-1</Value>
            </Parameter>
            <Parameter Name="Validation.Expected2">
                <Value>0</Value>
                <Value>1</Value>
                <Value>2</Value>
                <Value>10000</Value>
                <Value>1</Value>
                <Value>0</Value>
                <Value>0</Value>
            </Parameter>
        </Row>
        <Row Name="And">
            <Parameter Name="Validation.Type">Epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SBinaryUintOp {
                int input1;
                int input2;
                int output1;
                int output2;
            };
            RWStructuredBuffer&lt;SBinaryUintOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SBinaryUintOp l = g_buf[GI];
                l.output1 = l.input1 &amp; l.input2;
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>0x1</Value>
                <Value>0x01</Value>
                <Value>0x7fff0000</Value>
                <Value>0x33333333</Value>
                <Value>0x137f</Value>
                <Value>0x12345678</Value>
                <Value>0xa341</Value>
                <Value>-1</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>0x1</Value>
                <Value>0xf0</Value>
                <Value>0x0000ffff</Value>
                <Value>0x22222222</Value>
                <Value>0xec80</Value>
                <Value>-1</Value>
                <Value>0x3471</Value>
                <Value>-1</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>0x1</Value>
                <Value>0x00</Value>
                <Value>0x0</Value>
                <Value>0x22222222</Value>
                <Value>0x0</Value>
                <Value>0x12345678</Value>
                <Value>0x2041</Value>
                <Value>-1</Value>
            </Parameter>
        </Row>
        <Row Name="IMin">
            <Parameter Name="Validation.Type">Epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SBinaryIntOp {
                int input1;
                int input2;
                int output1;
                int output2;
            };
            RWStructuredBuffer&lt;SBinaryIntOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SBinaryIntOp l = g_buf[GI];
                l.output1 = min(l.input1, l.input2);
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>-2147483648</Value>
                <Value>-10</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>10</Value>
                <Value>2147483647</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>0</Value>
                <Value>10</Value>
                <Value>-10</Value>
                <Value>10</Value>
                <Value>10</Value>
                <Value>0</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>-2147483648</Value>
                <Value>-10</Value>
                <Value>-10</Value>
                <Value>0</Value>
                <Value>10</Value>
                <Value>0</Value>
            </Parameter>
        </Row>
        <Row Name="Xor">
            <Parameter Name="Validation.Type">Epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SBinaryUintOp {
                int input1;
                int input2;
                int output1;
                int output2;
            };
            RWStructuredBuffer&lt;SBinaryUintOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SBinaryUintOp l = g_buf[GI];
                l.output1 = l.input1 ^ l.input2;
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>0x1</Value>
                <Value>0x01</Value>
                <Value>0x7fff0000</Value>
                <Value>0x11111111</Value>
                <Value>0x137f</Value>
                <Value>0x0</Value>
                <Value>0x12345678</Value>
                <Value>0xa341</Value>
                <Value>-1</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>0x1</Value>
                <Value>0xf0</Value>
                <Value>0x0000ffff</Value>
                <Value>0x22222222</Value>
                <Value>0xec80</Value>
                <Value>0x0</Value>
                <Value>0x00000000</Value>
                <Value>0x3471</Value>
                <Value>-1</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>0x0</Value>
                <Value>0xf1</Value>
                <Value>0x7fffffff</Value>
                <Value>0x33333333</Value>
                <Value>0xffff</Value>
                <Value>0x0</Value>
                <Value>0x12345678</Value>
                <Value>0x9730</Value>
                <Value>0x00000000</Value>
            </Parameter>
        </Row>
    </Table>
    <Table Id="TertiaryIntOpTable">
        <ParameterTypes>
            <ParameterType Name="ShaderOp.Target">String</ParameterType>
            <ParameterType Name="ShaderOp.Arguments">String</ParameterType>
            <ParameterType Name="ShaderOp.Text">String</ParameterType>
            <ParameterType Name="Validation.Type">String</ParameterType>
            <ParameterType Name="Validation.Tolerance">double</ParameterType>
            <ParameterType Array="true" Name="Validation.Input1">String</ParameterType>
            <ParameterType Array="true" Name="Validation.Input2">String</ParameterType>
            <ParameterType Array="true" Name="Validation.Input3">String</ParameterType>
            <ParameterType Array="true" Name="Validation.Expected1">String</ParameterType>
        </ParameterTypes>
        <Row Name="IMad">
            <Parameter Name="Validation.Type">epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0</Parameter>
            <Parameter Name="ShaderOp.Text"> struct STertiaryIntOp {
                int input1;
                int input2;
                int input3;
                int output;
            };
            RWStructuredBuffer&lt;STertiaryIntOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                STertiaryIntOp l = g_buf[GI];
                l.output = mad(l.input1, l.input2, l.input3);
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>-2147483647</Value>
                <Value>-256</Value>
                <Value>-1</Value>
                <Value>0</Value>
                <Value>1</Value>
                <Value>2</Value>
                <Value>16</Value>
                <Value>2147483647</Value>
                <Value>1</Value>
                <Value>-1</Value>
                <Value>1</Value>
                <Value>10</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>1</Value>
                <Value>-256</Value>
                <Value>-1</Value>
                <Value>0</Value>
                <Value>1</Value>
                <Value>3</Value>
                <Value>16</Value>
                <Value>0</Value>
                <Value>1</Value>
                <Value>-1</Value>
                <Value>10</Value>
                <Value>100</Value>
            </Parameter>
            <Parameter Name="Validation.Input3">
                <Value>0</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>1</Value>
                <Value>3</Value>
                <Value>1</Value>
                <Value>255</Value>
                <Value>2147483646</Value>
                <Value>-2147483647</Value>
                <Value>-10</Value>
                <Value>-2000</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>-2147483647</Value>
                <Value>65536</Value>
                <Value>1</Value>
                <Value>0</Value>
                <Value>2</Value>
                <Value>9</Value>
                <Value>257</Value>
                <Value>255</Value>
                <Value>2147483647</Value>
                <Value>-2147483646</Value>
                <Value>0</Value>
                <Value>-1000</Value>
            </Parameter>
        </Row>
    </Table>
    <Table Id="UnaryUintOpTable">
        <ParameterTypes>
            <ParameterType Name="ShaderOp.Target">String</ParameterType>
            <ParameterType Name="ShaderOp.Arguments">String</ParameterType>
            <ParameterType Name="ShaderOp.Text">String</ParameterType>
            <ParameterType Name="Validation.Type">String</ParameterType>
            <ParameterType Name="Validation.Tolerance">double</ParameterType>
            <ParameterType Array="true" Name="Validation.Input1">String</ParameterType>
            <ParameterType Array="true" Name="Validation.Expected1">String</ParameterType>
        </ParameterTypes>
        <Row Name="FirstbitHi">
            <Parameter Name="Validation.Type">Epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SUnaryUintOp {
                uint input;
                uint output;
            };
            RWStructuredBuffer&lt;SUnaryUintOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SUnaryUintOp l = g_buf[GI];
                l.output = firstbithigh(l.input);
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>0</Value>
                <Value>1</Value>
                <Value>8</Value>
                <Value>65536</Value>
                <Value>2147483647</Value>
                <Value>4294967295</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>-1</Value>
                <Value>0</Value>
                <Value>3</Value>
                <Value>16</Value>
                <Value>30</Value>
                <Value>31</Value>
            </Parameter>
        </Row>
    </Table>
    <Table Id="BinaryUintOpTable">
        <ParameterTypes>
            <ParameterType Name="ShaderOp.Target">String</ParameterType>
            <ParameterType Name="ShaderOp.Arguments">String</ParameterType>
            <ParameterType Name="ShaderOp.Text">String</ParameterType>
            <ParameterType Name="Validation.Type">String</ParameterType>
            <ParameterType Name="Validation.Tolerance">double</ParameterType>
            <ParameterType Array="true" Name="Validation.Input1">String</ParameterType>
            <ParameterType Array="true" Name="Validation.Input2">String</ParameterType>
            <ParameterType Array="true" Name="Validation.Expected1">String</ParameterType>
            <ParameterType Array="true" Name="Validation.Expected2">String</ParameterType>
        </ParameterTypes>
        <Row Name="UMul">
            <Parameter Name="Validation.Type">Epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SBinaryUintOp {
                uint input1;
                uint input2;
                uint output1;
                uint output2;
            };
            RWStructuredBuffer&lt;SBinaryUintOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SBinaryUintOp l = g_buf[GI];
                l.output1 = l.input1 * l.input2;
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>0</Value>
                <Value>1</Value>
                <Value>10</Value>
                <Value>10000</Value>
                <Value>2147483647</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>0</Value>
                <Value>256</Value>
                <Value>4</Value>
                <Value>10001</Value>
                <Value>0</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>0</Value>
                <Value>256</Value>
                <Value>40</Value>
                <Value>100010000</Value>
                <Value>0</Value>
            </Parameter>
        </Row>
        <Row Name="UAddc">
            <Parameter Name="Validation.Type">Epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SBinaryUintOp {
                uint input1;
                uint input2;
                uint output1;
                uint output2;
            };
            RWStructuredBuffer&lt;SBinaryUintOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SBinaryUintOp l = g_buf[GI];
                uint2 x = uint2(l.input1, l.input2);
                uint2 y = AddUint64(x, x);
                l.output1 = y.x;
                l.output2 = y.y;
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>1</Value>
                <Value>1</Value>
                <Value>10000</Value>
                <Value>0x80000000</Value>
                <Value>0x7fffffff</Value>
                <Value>0xffffffff</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>0</Value>
                <Value>256</Value>
                <Value>10001</Value>
                <Value>1</Value>
                <Value>0x7fffffff</Value>
                <Value>0x7fffffff</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>2</Value>
                <Value>2</Value>
                <Value>20000</Value>
                <Value>0</Value>
                <Value>0xfffffffe</Value>
                <Value>0xfffffffe</Value>
            </Parameter>
            <Parameter Name="Validation.Expected2">
                <Value>0</Value>
                <Value>512</Value>
                <Value>20002</Value>
                <Value>3</Value>
                <Value>0xfffffffe</Value>
                <Value>0xffffffff</Value>
            </Parameter>
        </Row>
        <Row Name="UMin">
            <Parameter Name="Validation.Type">Epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SBinaryUintOp {
                uint input1;
                uint input2;
                uint output1;
                uint output2;
            };
            RWStructuredBuffer&lt;SBinaryUintOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SBinaryUintOp l = g_buf[GI];
                l.output1 = min(l.input1, l.input2);
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>0</Value>
                <Value>0</Value>
                <Value>10</Value>
                <Value>10000</Value>
                <Value>2147483647</Value>
                <Value>4294967295</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>0</Value>
                <Value>256</Value>
                <Value>4</Value>
                <Value>10001</Value>
                <Value>0</Value>
                <Value>4294967295</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>0</Value>
                <Value>0</Value>
                <Value>4</Value>
                <Value>10000</Value>
                <Value>0</Value>
                <Value>4294967295</Value>
            </Parameter>
        </Row>
        <Row Name="UMax">
            <Parameter Name="Validation.Type">Epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SBinaryUintOp {
                uint input1;
                uint input2;
                uint output1;
                uint output2;
            };
            RWStructuredBuffer&lt;SBinaryUintOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SBinaryUintOp l = g_buf[GI];
                l.output1 = max(l.input1, l.input2);
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>0</Value>
                <Value>0</Value>
                <Value>10</Value>
                <Value>10000</Value>
                <Value>2147483647</Value>
                <Value>4294967295</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>0</Value>
                <Value>256</Value>
                <Value>4</Value>
                <Value>10001</Value>
                <Value>0</Value>
                <Value>4294967295</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>0</Value>
                <Value>256</Value>
                <Value>10</Value>
                <Value>10001</Value>
                <Value>2147483647</Value>
                <Value>4294967295</Value>
            </Parameter>
        </Row>
        <Row Name="USub">
            <Parameter Name="Validation.Type">Epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SBinaryIntOp {
                uint input1;
                uint input2;
                uint output1;
                uint output2;
            };
            RWStructuredBuffer&lt;SBinaryIntOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SBinaryIntOp l = g_buf[GI];
                l.output1 = l.input1 - l.input2;
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>2147483648</Value>
                <Value>4294967295</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>30</Value>
                <Value>2147483647</Value>
                <Value>54724</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>0</Value>
                <Value>10</Value>
                <Value>0</Value>
                <Value>10</Value>
                <Value>10</Value>
                <Value>0</Value>
                <Value>54238</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>2147483648</Value>
                <Value>4294967285</Value>
                <Value>0</Value>
                <Value>4294967286</Value>
                <Value>20</Value>
                <Value>2147483647</Value>
                <Value>486</Value>
            </Parameter>
        </Row>
        <Row Name="UAdd">
            <Parameter Name="Validation.Type">Epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SBinaryIntOp {
                uint input1;
                uint input2;
                uint output1;
                uint output2;
            };
            RWStructuredBuffer&lt;SBinaryIntOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SBinaryIntOp l = g_buf[GI];
                l.output1 = l.input1 + l.input2;
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>2147483648</Value>
                <Value>4294967285</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>10</Value>
                <Value>2147483647</Value>
                <Value>486</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>0</Value>
                <Value>10</Value>
                <Value>0</Value>
                <Value>10</Value>
                <Value>10</Value>
                <Value>0</Value>
                <Value>54238</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>2147483648</Value>
                <Value>4294967295</Value>
                <Value>0</Value>
                <Value>10</Value>
                <Value>20</Value>
                <Value>2147483647</Value>
                <Value>54724</Value>
            </Parameter>
        </Row>
        <Row Name="UDiv">
            <Parameter Name="Validation.Type">Epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SBinaryUintOp {
                uint input1;
                uint input2;
                uint output1;
                uint output2;
            };
            RWStructuredBuffer&lt;SBinaryUintOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SBinaryUintOp l = g_buf[GI];
                l.output1 = l.input1 / l.input2;
                l.output2 = l.input1 % l.input2;
                g_buf[GI] = l;
            };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>1</Value>
                <Value>1</Value>
                <Value>10</Value>
                <Value>10000</Value>
                <Value>2147483647</Value>
                <Value>2147483647</Value>
                <Value>0xffffffff</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>0</Value>
                <Value>256</Value>
                <Value>4</Value>
                <Value>10001</Value>
                <Value>0</Value>
                <Value>2147483647</Value>
                <Value>1</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>0xffffffff</Value>
                <Value>0</Value>
                <Value>2</Value>
                <Value>0</Value>
                <Value>0xffffffff</Value>
                <Value>1</Value>
                <Value>0xffffffff</Value>
            </Parameter>
            <Parameter Name="Validation.Expected2">
                <Value>0xffffffff</Value>
                <Value>1</Value>
                <Value>2</Value>
                <Value>10000</Value>
                <Value>0xffffffff</Value>
                <Value>0</Value>
                <Value>0</Value>
            </Parameter>
        </Row>
    </Table>
    <Table Id="TertiaryUintOpTable">
        <ParameterTypes>
            <ParameterType Name="ShaderOp.Target">String</ParameterType>
            <ParameterType Name="ShaderOp.Arguments">String</ParameterType>
            <ParameterType Name="ShaderOp.Text">String</ParameterType>
            <ParameterType Name="Validation.Type">String</ParameterType>
            <ParameterType Name="Validation.Tolerance">double</ParameterType>
            <ParameterType Array="true" Name="Validation.Input1">String</ParameterType>
            <ParameterType Array="true" Name="Validation.Input2">String</ParameterType>
            <ParameterType Array="true" Name="Validation.Input3">String</ParameterType>
            <ParameterType Array="true" Name="Validation.Expected1">String</ParameterType>
        </ParameterTypes>
        <Row Name="UMad">
            <Parameter Name="Validation.Type">epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0</Parameter>
            <Parameter Name="ShaderOp.Text"> struct STertiaryUintOp {
                    uint input1;
                    uint input2;
                    uint input3;
                    uint output;
                };
                RWStructuredBuffer&lt;STertiaryUintOp&gt; g_buf : register(u0);
                [numthreads(8,8,1)]
                void main(uint GI : SV_GroupIndex) {
                    STertiaryUintOp l = g_buf[GI];
                    l.output = mad(l.input1, l.input2, l.input3);
                    g_buf[GI] = l;
                };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>0</Value>
                <Value>1</Value>
                <Value>2</Value>
                <Value>16</Value>
                <Value>2147483647</Value>
                <Value>0</Value>
                <Value>10</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>0</Value>
                <Value>1</Value>
                <Value>2</Value>
                <Value>16</Value>
                <Value>1</Value>
                <Value>0</Value>
                <Value>10</Value>
            </Parameter>
            <Parameter Name="Validation.Input3">
                <Value>0</Value>
                <Value>0</Value>
                <Value>1</Value>
                <Value>15</Value>
                <Value>0</Value>
                <Value>10</Value>
                <Value>10</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>0</Value>
                <Value>1</Value>
                <Value>5</Value>
                <Value>271</Value>
                <Value>2147483647</Value>
                <Value>10</Value>
                <Value>110</Value>
            </Parameter>
        </Row>
    </Table>
    <Table Id="DotOpTable">
        <ParameterTypes>
            <ParameterType Name="ShaderOp.Target">String</ParameterType>
            <ParameterType Name="ShaderOp.Arguments">String</ParameterType>
            <ParameterType Name="ShaderOp.Text">String</ParameterType>
            <ParameterType Name="Validation.Type">String</ParameterType>
            <ParameterType Name="Validation.Tolerance">double</ParameterType>
            <ParameterType Array="true" Name="Validation.Input1">String</ParameterType>
            <ParameterType Array="true" Name="Validation.Input2">String</ParameterType>
            <ParameterType Array="true" Name="Validation.Expected1">String</ParameterType>
            <ParameterType Array="true" Name="Validation.Expected2">String</ParameterType>
            <ParameterType Array="true" Name="Validation.Expected3">String</ParameterType>
        </ParameterTypes>
        <Row Name="Dot">
            <Parameter Name="Validation.Type">epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0.008</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SDotOp {
                   float4 input1;
                   float4 input2;
                   float o_dot2;
                   float o_dot3;
                   float o_dot4;
                };
                RWStructuredBuffer&lt;SDotOp&gt; g_buf : register(u0);
                [numthreads(8,8,1)]
                void main(uint GI : SV_GroupIndex) {
                    SDotOp l = g_buf[GI];
                    l.o_dot2 = dot(l.input1.xy, l.input2.xy);
                    l.o_dot3 = dot(l.input1.xyz, l.input2.xyz);
                    l.o_dot4 = dot(l.input1.xyzw, l.input2.xyzw);
                    g_buf[GI] = l;
                };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>NaN,NaN,NaN,NaN</Value>
                <Value>-Inf,-Inf,-Inf,-Inf</Value>
                <Value>-denorm,-denorm,-denorm,-denorm</Value>
                <Value>-0,-0,-0,-0</Value>
                <Value>0,0,0,0</Value>
                <Value>denorm,denorm,denorm,denorm</Value>
                <Value>Inf,Inf,Inf,Inf</Value>
                <Value>1,1,1,1</Value>
                <Value>-10,0,0,10</Value>
                <Value>Inf,Inf,Inf,-Inf</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>NaN,NaN,NaN,NaN</Value>
                <Value>-Inf,-Inf,-Inf,-Inf</Value>
                <Value>-denorm,-denorm,-denorm,-denorm</Value>
                <Value>-0,-0,-0,-0</Value>
                <Value>0,0,0,0</Value>
                <Value>denorm,denorm,denorm,denorm</Value>
                <Value>Inf,Inf,Inf,Inf</Value>
                <Value>1,1,1,1</Value>
                <Value>10,0,0,10</Value>
                <Value>Inf,Inf,Inf,Inf</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>nan</Value>
                <Value>inf</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>inf</Value>
                <Value>2</Value>
                <Value>-100</Value>
                <Value>inf</Value>
            </Parameter>
            <Parameter Name="Validation.Expected2">
                <Value>nan</Value>
                <Value>inf</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>inf</Value>
                <Value>3</Value>
                <Value>-100</Value>
                <Value>inf</Value>
            </Parameter>
            <Parameter Name="Validation.Expected3">
                <Value>nan</Value>
                <Value>inf</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>inf</Value>
                <Value>4</Value>
                <Value>0</Value>
                <Value>nan</Value>
            </Parameter>
        </Row>
    </Table>
    <Table Id="Msad4Table">
        <ParameterTypes>
            <ParameterType Name="ShaderOp.Text">String</ParameterType>
            <ParameterType Name="Validation.Tolerance">int</ParameterType>
            <ParameterType Array="true" Name="Validation.Input1">unsigned int</ParameterType>
            <ParameterType Array="true" Name="Validation.Input2">String</ParameterType>
            <ParameterType Array="true" Name="Validation.Input3">String</ParameterType>
            <ParameterType Array="true" Name="Validation.Expected1">String</ParameterType>
        </ParameterTypes>
        <Row Name="Bfi">
            <Parameter Name="Validation.Type">epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SMsad4 {
                        uint ref;
                        uint2 source;
                        uint4 accum;
                        uint4 result;
                    };
                    RWStructuredBuffer&lt;SMsad4&gt; g_buf : register(u0);
                    [numthreads(8,8,1)]
                    void main(uint GI : SV_GroupIndex) {
                        SMsad4 l = g_buf[GI];
                        l.result = msad4(l.ref, l.source, l.accum);
                        g_buf[GI] = l;
                    };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_0</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>0xA100B2C3</Value>
                <Value>0x00000000</Value>
                <Value>0xFFFF01C1</Value>
                <Value>0xFFFFFFFF</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>0xD7B0C372, 0x4F57C2A3</Value>
                <Value>0xFFFFFFFF, 0x00000000</Value>
                <Value>0x38A03AEF, 0x38194DA3</Value>
                <Value>0xFFFFFFFF, 0x00000000</Value>
            </Parameter>
            <Parameter Name="Validation.Input3">
                <Value>1,2,3,4</Value>
                <Value>1,2,3,4</Value>
                <Value>0,0,0,0</Value>
                <Value>10,10,10,10</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>153,6,92,113</Value>
                <Value>1,2,3,4</Value>
                <Value>397,585,358,707</Value>
                <Value>10,265,520,775</Value>
            </Parameter>
        </Row>
    </Table>
    <Table Id="WaveIntrinsicsActiveIntTable">
        <ParameterTypes>
            <ParameterType Name="ShaderOp.Target">String</ParameterType>
            <ParameterType Name="ShaderOp.Text">String</ParameterType>
            <ParameterType Name="Validation.NumInputSet">String</ParameterType>
            <ParameterType Array="true" Name="Validation.InputSet1">String</ParameterType>
            <ParameterType Array="true" Name="Validation.InputSet2">String</ParameterType>
            <ParameterType Array="true" Name="Validation.InputSet3">String</ParameterType>
            <ParameterType Array="true" Name="Validation.InputSet4">String</ParameterType>
        </ParameterTypes>
        <Row Name="WaveActiveAllEqual">
            <Parameter Name="ShaderOp.Name">WaveActiveAllEqual</Parameter>
            <Parameter Name="ShaderOp.Text"> struct PerThreadData {
                        uint firstLaneId;
                        uint laneIndex;
                        int mask;
                        int input;
                        int output;
                    };
                    RWStructuredBuffer&lt;PerThreadData&gt; g_sb : register(u0);
                    [numthreads(8,12,1)]
                    void main(uint GI : SV_GroupIndex) {
                        PerThreadData pts = g_sb[GI];
                        pts.firstLaneId = WaveReadLaneFirst(GI);
                        pts.laneIndex = WaveGetLaneIndex();
                        if (pts.mask != 0) {
                            pts.output = WaveActiveAllEqual(pts.input);
                        }
                        else {
                            pts.output = WaveActiveAllEqual(pts.input);
                        }
                        g_sb[GI] = pts;
                    };</Parameter>
            <Parameter Name="Validation.NumInputSet">3</Parameter>
            <Parameter Name="Validation.InputSet1">
                <Value>1</Value>
                <Value>2</Value>
                <Value>3</Value>
                <Value>4</Value>
                <Value>1</Value>
                <Value>1</Value>
                <Value>1</Value>
                <Value>1</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet2">
                <Value>3</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet3">
                <Value>-10</Value>
            </Parameter>
        </Row>
        <Row Name="WaveActiveAnyTrue">
            <Parameter Name="ShaderOp.Name">WaveActiveAnyTrue</Parameter>
            <Parameter Name="ShaderOp.Text"> struct PerThreadData {
                        uint firstLaneId;
                        uint laneIndex;
                        int mask;
                        bool input;
                        bool output;
                    };
                    RWStructuredBuffer&lt;PerThreadData&gt; g_sb : register(u0);
                    [numthreads(8,12,1)]
                    void main(uint GI : SV_GroupIndex) {
                        PerThreadData pts = g_sb[GI];
                        pts.firstLaneId = WaveReadLaneFirst(GI);
                        pts.laneIndex = WaveGetLaneIndex();
                        if (pts.mask != 0) {
                            pts.output = WaveActiveAnyTrue(pts.input);
                        }
                        else {
                            pts.output = WaveActiveAnyTrue(pts.input);
                        }
                        g_sb[GI] = pts;
                    };</Parameter>
            <Parameter Name="Validation.NumInputSet">3</Parameter>
            <Parameter Name="Validation.InputSet1">
                <Value>1</Value>
                <Value>0</Value>
                <Value>1</Value>
                <Value>0</Value>
                <Value>1</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet2">
                <Value>1</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet3">
                <Value>0</Value>
            </Parameter>
        </Row>
        <Row Name="WaveActiveMax">
            <Parameter Name="ShaderOp.Name">WaveActiveMax</Parameter>
            <Parameter Name="ShaderOp.Text"> struct PerThreadData {
                        uint firstLaneId;
                        uint laneIndex;
                        int mask;
                        int input;
                        int output;
                    };
                    RWStructuredBuffer&lt;PerThreadData&gt; g_sb : register(u0);
                    [numthreads(8,12,1)]
                    void main(uint GI : SV_GroupIndex) {
                        PerThreadData pts = g_sb[GI];
                        pts.firstLaneId = WaveReadLaneFirst(GI);
                        pts.laneIndex = WaveGetLaneIndex();
                        if (pts.mask != 0) {
                            pts.output = WaveActiveMax(pts.input);
                        }
                        else {
                            pts.output = WaveActiveMax(pts.input);
                        }
                        g_sb[GI] = pts;
                    };</Parameter>
            <Parameter Name="Validation.NumInputSet">4</Parameter>
            <Parameter Name="Validation.InputSet1">
                <Value>1</Value>
                <Value>2</Value>
                <Value>3</Value>
                <Value>4</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet2">
                <Value>0</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet3">
                <Value>1</Value>
                <Value>10</Value>
                <Value>-4</Value>
                <Value>-64</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet4">
                <Value>-100</Value>
                <Value>-1000</Value>
                <Value>300</Value>
            </Parameter>
        </Row>
        <Row Name="WaveActiveMin">
            <Parameter Name="ShaderOp.Name">WaveActiveMin</Parameter>
            <Parameter Name="ShaderOp.Text"> struct PerThreadData {
                        uint firstLaneId;
                        uint laneIndex;
                        int mask;
                        int input;
                        int output;
                    };
                    RWStructuredBuffer&lt;PerThreadData&gt; g_sb : register(u0);
                    [numthreads(8,12,1)]
                    void main(uint GI : SV_GroupIndex) {
                        PerThreadData pts = g_sb[GI];
                        pts.firstLaneId = WaveReadLaneFirst(GI);
                        pts.laneIndex = WaveGetLaneIndex();
                        if (pts.mask != 0) {
                            pts.output = WaveActiveMin(pts.input);
                        }
                        else {
                            pts.output = WaveActiveMin(pts.input);
                        }
                        g_sb[GI] = pts;
                    };</Parameter>
            <Parameter Name="Validation.NumInputSet">4</Parameter>
            <Parameter Name="Validation.InputSet1">
                <Value>1</Value>
                <Value>2</Value>
                <Value>3</Value>
                <Value>4</Value>
                <Value>5</Value>
                <Value>6</Value>
                <Value>7</Value>
                <Value>8</Value>
                <Value>9</Value>
                <Value>10</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet2">
                <Value>0</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet3">
                <Value>1</Value>
                <Value>10</Value>
                <Value>-4</Value>
                <Value>-64</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet4">
                <Value>-100</Value>
                <Value>-1000</Value>
                <Value>300</Value>
            </Parameter>
        </Row>
        <Row Name="WaveActiveSum">
            <Parameter Name="ShaderOp.Name">WaveActiveSum</Parameter>
            <Parameter Name="ShaderOp.Text"> struct PerThreadData {
                        uint firstLaneId;
                        uint laneIndex;
                        int mask;
                        int input;
                        int output;
                    };
                    RWStructuredBuffer&lt;PerThreadData&gt; g_sb : register(u0);
                    [numthreads(8,12,1)]
                    void main(uint GI : SV_GroupIndex) {
                        PerThreadData pts = g_sb[GI];
                        pts.firstLaneId = WaveReadLaneFirst(GI);
                        pts.laneIndex = WaveGetLaneIndex();
                        if (pts.mask != 0) {
                            pts.output = WaveActiveSum(pts.input);
                        }
                        else {
                            pts.output = WaveActiveSum(pts.input);
                        }
                        g_sb[GI] = pts;
                    };</Parameter>
            <Parameter Name="Validation.NumInputSet">3</Parameter>
            <Parameter Name="Validation.InputSet1">
                <Value>1</Value>
                <Value>2</Value>
                <Value>3</Value>
                <Value>4</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet2">
                <Value>0</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet3">
                <Value>2</Value>
                <Value>4</Value>
                <Value>8</Value>
                <Value>-64</Value>
            </Parameter>
        </Row>
        <Row Name="WaveActiveAllTrue">
            <Parameter Name="ShaderOp.Name">WaveActiveAllTrue</Parameter>
            <Parameter Name="ShaderOp.Text"> struct PerThreadData {
                        uint firstLaneId;
                        uint laneIndex;
                        int mask;
                        bool input;
                        bool output;
                    };
                    RWStructuredBuffer&lt;PerThreadData&gt; g_sb : register(u0);
                    [numthreads(8,12,1)]
                    void main(uint GI : SV_GroupIndex) {
                        PerThreadData pts = g_sb[GI];
                        pts.firstLaneId = WaveReadLaneFirst(GI);
                        pts.laneIndex = WaveGetLaneIndex();
                        if (pts.mask != 0) {
                            pts.output = WaveActiveAllTrue(pts.input);
                        }
                        else {
                            pts.output = WaveActiveAllTrue(pts.input);
                        }
                        g_sb[GI] = pts;
                    };</Parameter>
            <Parameter Name="Validation.NumInputSet">3</Parameter>
            <Parameter Name="Validation.InputSet1">
                <Value>1</Value>
                <Value>0</Value>
                <Value>1</Value>
                <Value>0</Value>
                <Value>1</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet2">
                <Value>1</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet3">
                <Value>1</Value>
            </Parameter>
        </Row>
        <Row Name="WaveActiveCountBits">
            <Parameter Name="ShaderOp.Name">WaveActiveCountBits</Parameter>
            <Parameter Name="ShaderOp.Text"> struct PerThreadData {
                        uint firstLaneId;
                        uint laneIndex;
                        int mask;
                        int input;
                        int output;
                    };
                    RWStructuredBuffer&lt;PerThreadData&gt; g_sb : register(u0);
                    [numthreads(8,12,1)]
                    void main(uint GI : SV_GroupIndex) {
                        PerThreadData pts = g_sb[GI];
                        pts.firstLaneId = WaveReadLaneFirst(GI);
                        pts.laneIndex = WaveGetLaneIndex();
                        if (pts.mask != 0) {
                            pts.output = WaveActiveCountBits(pts.input &gt; 3);
                        }
                        else {
                            pts.output = WaveActiveCountBits(pts.input &gt; 3);
                        }
                        g_sb[GI] = pts;
                    };</Parameter>
            <Parameter Name="Validation.NumInputSet">4</Parameter>
            <Parameter Name="Validation.InputSet1">
                <Value>1</Value>
                <Value>2</Value>
                <Value>3</Value>
                <Value>4</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet2">
                <Value>0</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet3">
                <Value>1</Value>
                <Value>10</Value>
                <Value>-4</Value>
                <Value>-64</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet4">
                <Value>-100</Value>
                <Value>-1000</Value>
                <Value>300</Value>
            </Parameter>
        </Row>
        <Row Name="WaveActiveProduct">
            <Parameter Name="ShaderOp.Name">WaveActiveProduct</Parameter>
            <Parameter Name="ShaderOp.Text"> struct PerThreadData {
                        uint firstLaneId;
                        uint laneIndex;
                        int mask;
                        int input;
                        int output;
                    };
                    RWStructuredBuffer&lt;PerThreadData&gt; g_sb : register(u0);
                    [numthreads(8,12,1)]
                    void main(uint GI : SV_GroupIndex) {
                        PerThreadData pts = g_sb[GI];
                        pts.firstLaneId = WaveReadLaneFirst(GI);
                        pts.laneIndex = WaveGetLaneIndex();
                        if (pts.mask != 0) {
                            pts.output = WaveActiveProduct(pts.input);
                        }
                        else {
                            pts.output = WaveActiveProduct(pts.input);
                        }
                        g_sb[GI] = pts;
                    };</Parameter>
            <Parameter Name="Validation.NumInputSet">3</Parameter>
            <Parameter Name="Validation.InputSet1">
                <Value>1</Value>
                <Value>2</Value>
                <Value>3</Value>
                <Value>4</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet2">
                <Value>0</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet3">
                <Value>1</Value>
                <Value>2</Value>
                <Value>4</Value>
                <Value>-64</Value>
            </Parameter>
        </Row>
    </Table>
    <Table Id="WaveIntrinsicsActiveUintTable">
        <ParameterTypes>
            <ParameterType Name="ShaderOp.Target">String</ParameterType>
            <ParameterType Name="ShaderOp.Text">String</ParameterType>
            <ParameterType Name="Validation.NumInputSet">String</ParameterType>
            <ParameterType Array="true" Name="Validation.InputSet1">String</ParameterType>
            <ParameterType Array="true" Name="Validation.InputSet2">String</ParameterType>
            <ParameterType Array="true" Name="Validation.InputSet3">String</ParameterType>
            <ParameterType Array="true" Name="Validation.InputSet4">String</ParameterType>
        </ParameterTypes>
        <Row Name="WaveActiveBitAnd">
            <Parameter Name="ShaderOp.Name">WaveActiveBitAnd</Parameter>
            <Parameter Name="ShaderOp.Text"> struct PerThreadData {
                        uint firstLaneId;
                        uint laneIndex;
                        int mask;
                        uint input;
                        uint output;
                    };
                    RWStructuredBuffer&lt;PerThreadData&gt; g_sb : register(u0);
                    [numthreads(8,12,1)]
                    void main(uint GI : SV_GroupIndex) {
                        PerThreadData pts = g_sb[GI];
                        pts.firstLaneId = WaveReadLaneFirst(GI);
                        pts.laneIndex = WaveGetLaneIndex();
                        if (pts.mask != 0) {
                            pts.output = WaveActiveBitAnd(pts.input);
                        }
                        else {
                            pts.output = WaveActiveBitAnd(pts.input);
                        }
                        g_sb[GI] = pts;
                    };</Parameter>
            <Parameter Name="Validation.NumInputSet">4</Parameter>
            <Parameter Name="Validation.InputSet1">
                <Value>0xefffffff</Value>
                <Value>0xfdffffff</Value>
                <Value>0xffbfffff</Value>
                <Value>0xfff7ffff</Value>
                <Value>0xffffefff</Value>
                <Value>0xfffffdff</Value>
                <Value>0xffffffbf</Value>
                <Value>0xfffffff7</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet2">
                <Value>0xedb7edb7</Value>
                <Value>0xdb7edb7e</Value>
                <Value>0xb7edb7ed</Value>
                <Value>0x7edb7edb</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet3">
                <Value>0x12481248</Value>
                <Value>0x24812481</Value>
                <Value>0x48124812</Value>
                <Value>0x81248124</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet4">
                <Value>0x00000000</Value>
                <Value>0xffffffff</Value>
            </Parameter>
        </Row>
        <Row Name="WaveActiveBitOr">
            <Parameter Name="ShaderOp.Name">WaveActiveBitOr</Parameter>
            <Parameter Name="ShaderOp.Text"> struct PerThreadData {
                        uint firstLaneId;
                        uint laneIndex;
                        int mask;
                        uint input;
                        uint output;
                    };
                    RWStructuredBuffer&lt;PerThreadData&gt; g_sb : register(u0);
                    [numthreads(8,12,1)]
                    void main(uint GI : SV_GroupIndex) {
                        PerThreadData pts = g_sb[GI];
                        pts.firstLaneId = WaveReadLaneFirst(GI);
                        pts.laneIndex = WaveGetLaneIndex();
                        if (pts.mask != 0) {
                            pts.output = WaveActiveBitOr(pts.input);
                        }
                        else {
                            pts.output = WaveActiveBitOr(pts.input);
                        }
                        g_sb[GI] = pts;
                    };</Parameter>
            <Parameter Name="Validation.NumInputSet">4</Parameter>
            <Parameter Name="Validation.InputSet1">
                <Value>0xe0000000</Value>
                <Value>0x0d000000</Value>
                <Value>0x00b00000</Value>
                <Value>0x00070000</Value>
                <Value>0x0000e000</Value>
                <Value>0x00000d00</Value>
                <Value>0x000000b0</Value>
                <Value>0x00000007</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet2">
                <Value>0xedb7edb7</Value>
                <Value>0xdb7edb7e</Value>
                <Value>0xb7edb7ed</Value>
                <Value>0x7edb7edb</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet3">
                <Value>0x12481248</Value>
                <Value>0x24812481</Value>
                <Value>0x48124812</Value>
                <Value>0x81248124</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet4">
                <Value>0x00000000</Value>
                <Value>0xffffffff</Value>
            </Parameter>
        </Row>
        <Row Name="WaveActiveUMax">
            <Parameter Name="ShaderOp.Name">WaveActiveUMax</Parameter>
            <Parameter Name="ShaderOp.Text"> struct PerThreadData {
                        uint firstLaneId;
                        uint laneIndex;
                        int mask;
                        uint input;
                        uint output;
                    };
                    RWStructuredBuffer&lt;PerThreadData&gt; g_sb : register(u0);
                    [numthreads(8,12,1)]
                    void main(uint GI : SV_GroupIndex) {
                        PerThreadData pts = g_sb[GI];
                        pts.firstLaneId = WaveReadLaneFirst(GI);
                        pts.laneIndex = WaveGetLaneIndex();
                        if (pts.mask != 0) {
                            pts.output = WaveActiveMax(pts.input);
                        }
                        else {
                            pts.output = WaveActiveMax(pts.input);
                        }
                        g_sb[GI] = pts;
                    };</Parameter>
            <Parameter Name="Validation.NumInputSet">3</Parameter>
            <Parameter Name="Validation.InputSet1">
                <Value>1</Value>
                <Value>2</Value>
                <Value>3</Value>
                <Value>4</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet2">
                <Value>0</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet3">
                <Value>1</Value>
                <Value>10</Value>
                <Value>4</Value>
                <Value>64</Value>
            </Parameter>
        </Row>
        <Row Name="WaveActiveUMin">
            <Parameter Name="ShaderOp.Name">WaveActiveUMin</Parameter>
            <Parameter Name="ShaderOp.Text"> struct PerThreadData {
                        uint firstLaneId;
                        uint laneIndex;
                        int mask;
                        uint input;
                        uint output;
                    };
                    RWStructuredBuffer&lt;PerThreadData&gt; g_sb : register(u0);
                    [numthreads(8,12,1)]
                    void main(uint GI : SV_GroupIndex) {
                        PerThreadData pts = g_sb[GI];
                        pts.firstLaneId = WaveReadLaneFirst(GI);
                        pts.laneIndex = WaveGetLaneIndex();
                        if (pts.mask != 0) {
                            pts.output = WaveActiveMin(pts.input);
                        }
                        else {
                            pts.output = WaveActiveMin(pts.input);
                        }
                        g_sb[GI] = pts;
                    };</Parameter>
            <Parameter Name="Validation.NumInputSet">3</Parameter>
            <Parameter Name="Validation.InputSet1">
                <Value>1</Value>
                <Value>2</Value>
                <Value>3</Value>
                <Value>4</Value>
                <Value>5</Value>
                <Value>6</Value>
                <Value>7</Value>
                <Value>8</Value>
                <Value>9</Value>
                <Value>10</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet2">
                <Value>0</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet3">
                <Value>1</Value>
                <Value>10</Value>
                <Value>4</Value>
                <Value>64</Value>
            </Parameter>
        </Row>
        <Row Name="WaveActiveUSum">
            <Parameter Name="ShaderOp.Name">WaveActiveUSum</Parameter>
            <Parameter Name="ShaderOp.Text"> struct PerThreadData {
                        uint firstLaneId;
                        uint laneIndex;
                        int mask;
                        uint input;
                        uint output;
                    };
                    RWStructuredBuffer&lt;PerThreadData&gt; g_sb : register(u0);
                    [numthreads(8,12,1)]
                    void main(uint GI : SV_GroupIndex) {
                        PerThreadData pts = g_sb[GI];
                        pts.firstLaneId = WaveReadLaneFirst(GI);
                        pts.laneIndex = WaveGetLaneIndex();
                        if (pts.mask != 0) {
                            pts.output = WaveActiveSum(pts.input);
                        }
                        else {
                            pts.output = WaveActiveSum(pts.input);
                        }
                        g_sb[GI] = pts;
                    };</Parameter>
            <Parameter Name="Validation.NumInputSet">3</Parameter>
            <Parameter Name="Validation.InputSet1">
                <Value>1</Value>
                <Value>2</Value>
                <Value>3</Value>
                <Value>4</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet2">
                <Value>0</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet3">
                <Value>2</Value>
                <Value>4</Value>
                <Value>8</Value>
                <Value>64</Value>
            </Parameter>
        </Row>
        <Row Name="WaveActiveBitXor">
            <Parameter Name="ShaderOp.Name">WaveActiveBitXor</Parameter>
            <Parameter Name="ShaderOp.Text"> struct PerThreadData {
                        uint firstLaneId;
                        uint laneIndex;
                        int mask;
                        uint input;
                        uint output;
                    };
                    RWStructuredBuffer&lt;PerThreadData&gt; g_sb : register(u0);
                    [numthreads(8,12,1)]
                    void main(uint GI : SV_GroupIndex) {
                        PerThreadData pts = g_sb[GI];
                        pts.firstLaneId = WaveReadLaneFirst(GI);
                        pts.laneIndex = WaveGetLaneIndex();
                        if (pts.mask != 0) {
                            pts.output = WaveActiveBitXor(pts.input);
                        }
                        else {
                            pts.output = WaveActiveBitXor(pts.input);
                        }
                        g_sb[GI] = pts;
                    };</Parameter>
            <Parameter Name="Validation.NumInputSet">4</Parameter>
            <Parameter Name="Validation.InputSet1">
                <Value>0xe0000000</Value>
                <Value>0x0d000000</Value>
                <Value>0x00b00000</Value>
                <Value>0x00070000</Value>
                <Value>0x0000e000</Value>
                <Value>0x00000d00</Value>
                <Value>0x000000b0</Value>
                <Value>0x00000007</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet2">
                <Value>0xedb7edb7</Value>
                <Value>0xdb7edb7e</Value>
                <Value>0xb7edb7ed</Value>
                <Value>0x7edb7edb</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet3">
                <Value>0x12481248</Value>
                <Value>0x24812481</Value>
                <Value>0x48124812</Value>
                <Value>0x81248124</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet4">
                <Value>0x00000000</Value>
                <Value>0xffffffff</Value>
            </Parameter>
        </Row>
        <Row Name="WaveActiveUProduct">
            <Parameter Name="ShaderOp.Name">WaveActiveUProduct</Parameter>
            <Parameter Name="ShaderOp.Text"> struct PerThreadData {
                        uint firstLaneId;
                        uint laneIndex;
                        int mask;
                        uint input;
                        uint output;
                    };
                    RWStructuredBuffer&lt;PerThreadData&gt; g_sb : register(u0);
                    [numthreads(8,12,1)]
                    void main(uint GI : SV_GroupIndex) {
                        PerThreadData pts = g_sb[GI];
                        pts.firstLaneId = WaveReadLaneFirst(GI);
                        pts.laneIndex = WaveGetLaneIndex();
                        if (pts.mask != 0) {
                            pts.output = WaveActiveProduct(pts.input);
                        }
                        else {
                            pts.output = WaveActiveProduct(pts.input);
                        }
                        g_sb[GI] = pts;
                    };</Parameter>
            <Parameter Name="Validation.NumInputSet">3</Parameter>
            <Parameter Name="Validation.InputSet1">
                <Value>1</Value>
                <Value>2</Value>
                <Value>3</Value>
                <Value>4</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet2">
                <Value>0</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet3">
                <Value>1</Value>
                <Value>2</Value>
                <Value>4</Value>
                <Value>64</Value>
            </Parameter>
        </Row>
    </Table>
    <Table Id="WaveIntrinsicsPrefixIntTable">
        <ParameterTypes>
            <ParameterType Name="ShaderOp.Target">String</ParameterType>
            <ParameterType Name="ShaderOp.Text">String</ParameterType>
            <ParameterType Name="Validation.NumInputSet">String</ParameterType>
            <ParameterType Array="true" Name="Validation.InputSet1">String</ParameterType>
            <ParameterType Array="true" Name="Validation.InputSet2">String</ParameterType>
            <ParameterType Array="true" Name="Validation.InputSet3">String</ParameterType>
            <ParameterType Array="true" Name="Validation.InputSet4">String</ParameterType>
        </ParameterTypes>
        <Row Name="WavePrefixProduct">
            <Parameter Name="ShaderOp.Name">WavePrefixProduct</Parameter>
            <Parameter Name="ShaderOp.Text"> struct PerThreadData {
                        uint firstLaneId;
                        uint laneIndex;
                        int mask;
                        int input;
                        int output;
                    };
                    RWStructuredBuffer&lt;PerThreadData&gt; g_sb : register(u0);
                    [numthreads(8,12,1)]
                    void main(uint GI : SV_GroupIndex) {
                        PerThreadData pts = g_sb[GI];
                        pts.firstLaneId = WaveReadLaneFirst(GI);
                        pts.laneIndex = WaveGetLaneIndex();
                        if (pts.mask != 0) {
                            pts.output = WavePrefixProduct(pts.input);
                        }
                        else {
                            pts.output = WavePrefixProduct(pts.input);
                        }
                        g_sb[GI] = pts;
                    };</Parameter>
            <Parameter Name="Validation.NumInputSet">3</Parameter>
            <Parameter Name="Validation.InputSet1">
                <Value>1</Value>
                <Value>2</Value>
                <Value>3</Value>
                <Value>4</Value>
                <Value>5</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet2">
                <Value>0</Value>
                <Value>1</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet3">
                <Value>1</Value>
                <Value>2</Value>
                <Value>4</Value>
                <Value>-64</Value>
                <Value>128</Value>
            </Parameter>
        </Row>
        <Row Name="WavePrefixSum">
            <Parameter Name="ShaderOp.Name">WavePrefixSum</Parameter>
            <Parameter Name="ShaderOp.Text"> struct PerThreadData {
                        uint firstLaneId;
                        uint laneIndex;
                        int mask;
                        int input;
                        int output;
                    };
                    RWStructuredBuffer&lt;PerThreadData&gt; g_sb : register(u0);
                    [numthreads(8,12,1)]
                    void main(uint GI : SV_GroupIndex) {
                        PerThreadData pts = g_sb[GI];
                        pts.firstLaneId = WaveReadLaneFirst(GI);
                        pts.laneIndex = WaveGetLaneIndex();
                        if (pts.mask != 0) {
                            pts.output = WavePrefixSum(pts.input);
                        }
                        else {
                            pts.output = WavePrefixSum(pts.input);
                        }
                        g_sb[GI] = pts;
                    };</Parameter>
            <Parameter Name="Validation.NumInputSet">3</Parameter>
            <Parameter Name="Validation.InputSet1">
                <Value>1</Value>
                <Value>2</Value>
                <Value>3</Value>
                <Value>4</Value>
                <Value>5</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet2">
                <Value>0</Value>
                <Value>1</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet3">
                <Value>1</Value>
                <Value>2</Value>
                <Value>4</Value>
                <Value>-64</Value>
                <Value>128</Value>
            </Parameter>
        </Row>
        <Row Name="WavePrefixCountBits">
            <Parameter Name="ShaderOp.Name">WavePrefixCountBits</Parameter>
            <Parameter Name="ShaderOp.Text"> struct PerThreadData {
                        uint firstLaneId;
                        uint laneIndex;
                        int mask;
                        int input;
                        int output;
                    };
                    RWStructuredBuffer&lt;PerThreadData&gt; g_sb : register(u0);
                    [numthreads(8,12,1)]
                    void main(uint GI : SV_GroupIndex) {
                        PerThreadData pts = g_sb[GI];
                        pts.firstLaneId = WaveReadLaneFirst(GI);
                        pts.laneIndex = WaveGetLaneIndex();
                        if (pts.mask != 0) {
                            pts.output = WavePrefixCountBits(pts.input &gt; 3);
                        }
                        else {
                            pts.output = WavePrefixCountBits(pts.input &gt; 3);
                        }
                        g_sb[GI] = pts;
                    };</Parameter>
            <Parameter Name="Validation.NumInputSet">4</Parameter>
            <Parameter Name="Validation.InputSet1">
                <Value>1</Value>
                <Value>2</Value>
                <Value>3</Value>
                <Value>4</Value>
                <Value>5</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet2">
                <Value>0</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet3">
                <Value>1</Value>
                <Value>10</Value>
                <Value>-4</Value>
                <Value>-64</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet4">
                <Value>-100</Value>
                <Value>-1000</Value>
                <Value>300</Value>
            </Parameter>
        </Row>
    </Table>
    <Table Id="WaveIntrinsicsPrefixUintTable">
        <ParameterTypes>
            <ParameterType Name="ShaderOp.Target">String</ParameterType>
            <ParameterType Name="ShaderOp.Text">String</ParameterType>
            <ParameterType Name="Validation.NumInputSet">String</ParameterType>
            <ParameterType Array="true" Name="Validation.InputSet1">String</ParameterType>
            <ParameterType Array="true" Name="Validation.InputSet2">String</ParameterType>
            <ParameterType Array="true" Name="Validation.InputSet3">String</ParameterType>
            <ParameterType Array="true" Name="Validation.InputSet4">String</ParameterType>
        </ParameterTypes>
        <Row Name="WavePrefixUProduct">
            <Parameter Name="ShaderOp.Name">WavePrefixUProduct</Parameter>
            <Parameter Name="ShaderOp.Text"> struct PerThreadData {
                        uint firstLaneId;
                        uint laneIndex;
                        int mask;
                        uint input;
                        uint output;
                    };
                    RWStructuredBuffer&lt;PerThreadData&gt; g_sb : register(u0);
                    [numthreads(8,12,1)]
                    void main(uint GI : SV_GroupIndex) {
                        PerThreadData pts = g_sb[GI];
                        pts.firstLaneId = WaveReadLaneFirst(GI);
                        pts.laneIndex = WaveGetLaneIndex();
                        if (pts.mask != 0) {
                            pts.output = WavePrefixProduct(pts.input);
                        }
                        else {
                            pts.output = WavePrefixProduct(pts.input);
                        }
                        g_sb[GI] = pts;
                    };</Parameter>
            <Parameter Name="Validation.NumInputSet">3</Parameter>
            <Parameter Name="Validation.InputSet1">
                <Value>1</Value>
                <Value>2</Value>
                <Value>3</Value>
                <Value>4</Value>
                <Value>5</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet2">
                <Value>0</Value>
                <Value>1</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet3">
                <Value>1</Value>
                <Value>2</Value>
                <Value>4</Value>
                <Value>128</Value>
            </Parameter>
        </Row>
        <Row Name="WavePrefixUSum">
            <Parameter Name="ShaderOp.Name">WavePrefixUSum</Parameter>
            <Parameter Name="ShaderOp.Text"> struct PerThreadData {
                        uint firstLaneId;
                        uint laneIndex;
                        int mask;
                        uint input;
                        uint output;
                    };
                    RWStructuredBuffer&lt;PerThreadData&gt; g_sb : register(u0);
                    [numthreads(8,12,1)]
                    void main(uint GI : SV_GroupIndex) {
                        PerThreadData pts = g_sb[GI];
                        pts.firstLaneId = WaveReadLaneFirst(GI);
                        pts.laneIndex = WaveGetLaneIndex();
                        if (pts.mask != 0) {
                            pts.output = WavePrefixSum(pts.input);
                        }
                        else {
                            pts.output = WavePrefixSum(pts.input);
                        }
                        g_sb[GI] = pts;
                    };</Parameter>
            <Parameter Name="Validation.NumInputSet">3</Parameter>
            <Parameter Name="Validation.InputSet1">
                <Value>1</Value>
                <Value>2</Value>
                <Value>3</Value>
                <Value>4</Value>
                <Value>5</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet2">
                <Value>0</Value>
                <Value>1</Value>
            </Parameter>
            <Parameter Name="Validation.InputSet3">
                <Value>1</Value>
                <Value>2</Value>
                <Value>4</Value>
                <Value>128</Value>
            </Parameter>
        </Row>
    </Table>
    <Table Id="DenormBinaryFloatOpTable">
        <ParameterTypes>
            <ParameterType Name="ShaderOp.Target">String</ParameterType>
            <ParameterType Name="ShaderOp.Arguments">String</ParameterType>
            <ParameterType Name="ShaderOp.Text">String</ParameterType>
            <ParameterType Name="Validation.Type">String</ParameterType>
            <ParameterType Name="Validation.Tolerance">double</ParameterType>
            <ParameterType Array="true" Name="Validation.Input1">String</ParameterType>
            <ParameterType Array="true" Name="Validation.Input2">String</ParameterType>
            <ParameterType Array="true" Name="Validation.Expected1">String</ParameterType>
        </ParameterTypes>
        <Row Name="FDivDenormFTZ">
            <Parameter Name="Validation.Type">ulp</Parameter>
            <Parameter Name="Validation.Tolerance">1</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SBinaryFPOp {
                float input1;
                float input2;
                float output1;
                float output2;
            };
            RWStructuredBuffer&lt;SBinaryFPOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SBinaryFPOp l = g_buf[GI];
                l.output1 = l.input1 / l.input2;
                g_buf[GI] = l;
            }; </Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_2</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>0x007F0000</Value>
                <Value>0x007F0000</Value>
                <Value>0x40000000</Value>
                <Value>0x00800000</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>1</Value>
                <Value>0x007F0000</Value>
                <Value>0x7F7F0000</Value>
                <Value>0x40000000</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>0</Value>
                <Value>1</Value>
                <Value>0</Value>
                <Value>0</Value>
            </Parameter>
            <Parameter Name="ShaderOp.Arguments">-denorm ftz</Parameter>
        </Row>
        <Row Name="FDivDenormAny">
            <Parameter Name="Validation.Type">ulp</Parameter>
            <Parameter Name="Validation.Tolerance">1</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SBinaryFPOp {
                float input1;
                float input2;
                float output1;
                float output2;
            };
            RWStructuredBuffer&lt;SBinaryFPOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SBinaryFPOp l = g_buf[GI];
                l.output1 = l.input1 / l.input2;
                g_buf[GI] = l;
            }; </Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_2</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>0x007F0000</Value>
                <Value>0x007F0000</Value>
                <Value>0x40000000</Value>
                <Value>0x00800000</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>1</Value>
                <Value>0x007F0000</Value>
                <Value>0x7F7F0000</Value>
                <Value>0x40000000</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>0x007F0000</Value>
                <Value>1</Value>
                <Value>0x00404040</Value>
                <Value>0x00400000</Value>
            </Parameter>
            <Parameter Name="ShaderOp.Arguments">-denorm any</Parameter>
        </Row>
        <Row Name="FAddDenormAny">
            <Parameter Name="Validation.Type">ulp</Parameter>
            <Parameter Name="Validation.Tolerance">1</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SBinaryFPOp {
                float input1;
                float input2;
                float output1;
                float output2;
            };
            RWStructuredBuffer&lt;SBinaryFPOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SBinaryFPOp l = g_buf[GI];
                l.output1 = l.input1 + l.input2;
                g_buf[GI] = l;
            }; </Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_2</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>0x007E0000</Value>
                <Value>0x00200000</Value>
                <Value>0x007E0000</Value>
                <Value>0x007E0000</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>0x007E0000</Value>
                <Value>0x00200000</Value>
                <Value>0x807E0000</Value>
                <Value>0x800E0000</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>0x00FC0000</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>0x00700000</Value>
            </Parameter>
            <Parameter Name="ShaderOp.Arguments">-denorm any</Parameter>
        </Row>
        <Row Name="FMulDenormAny">
            <Parameter Name="Validation.Type">ulp</Parameter>
            <Parameter Name="Validation.Tolerance">1</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SBinaryFPOp {
                float input1;
                float input2;
                float output1;
                float output2;
            };
            RWStructuredBuffer&lt;SBinaryFPOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SBinaryFPOp l = g_buf[GI];
                l.output1 = l.input1 * l.input2;
                g_buf[GI] = l;
            }; </Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_2</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>0x00000300</Value>
                <Value>0x007F0000</Value>
                <Value>0x007F0000</Value>
                <Value>0x001E0000</Value>
                <Value>0x00000300</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>128</Value>
                <Value>1</Value>
                <Value>0x007F0000</Value>
                <Value>20</Value>
                <Value>0x78000000</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>0x00018000</Value>
                <Value>0x007F0000</Value>
                <Value>0</Value>
                <Value>0x01960000</Value>
                <Value>0x32400000</Value>
            </Parameter>
            <Parameter Name="ShaderOp.Arguments">-denorm any</Parameter>
        </Row>
        <Row Name="FMulDenormFTZ">
            <Parameter Name="Validation.Type">ulp</Parameter>
            <Parameter Name="Validation.Tolerance">1</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SBinaryFPOp {
                float input1;
                float input2;
                float output1;
                float output2;
            };
            RWStructuredBuffer&lt;SBinaryFPOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SBinaryFPOp l = g_buf[GI];
                l.output1 = l.input1 * l.input2;
                g_buf[GI] = l;
            }; </Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_2</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>0x00000300</Value>
                <Value>0x007F0000</Value>
                <Value>0x007F0000</Value>
                <Value>0x001E0000</Value>
                <Value>0x00000300</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>128</Value>
                <Value>1</Value>
                <Value>0x007F0000</Value>
                <Value>20</Value>
                <Value>0x78000000</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>0</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>0x01960000</Value>
                <Value>0x00400000</Value>
                <Value>0x32400000</Value>
            </Parameter>
            <Parameter Name="ShaderOp.Arguments">-denorm ftz</Parameter>
        </Row>
        <Row Name="FDivDenormPreserve">
            <Parameter Name="Validation.Type">ulp</Parameter>
            <Parameter Name="Validation.Tolerance">1</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SBinaryFPOp {
                float input1;
                float input2;
                float output1;
                float output2;
            };
            RWStructuredBuffer&lt;SBinaryFPOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SBinaryFPOp l = g_buf[GI];
                l.output1 = l.input1 / l.input2;
                g_buf[GI] = l;
            }; </Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_2</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>0x007F0000</Value>
                <Value>0x007F0000</Value>
                <Value>0x40000000</Value>
                <Value>0x00800000</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>1</Value>
                <Value>0x007F0000</Value>
                <Value>0x7F7F0000</Value>
                <Value>0x40000000</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>0x007F0000</Value>
                <Value>1</Value>
                <Value>0x00404040</Value>
                <Value>0x00400000</Value>
            </Parameter>
            <Parameter Name="ShaderOp.Arguments">-denorm preserve</Parameter>
        </Row>
        <Row Name="FSubDenormFTZ">
            <Parameter Name="Validation.Type">ulp</Parameter>
            <Parameter Name="Validation.Tolerance">1</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SBinaryFPOp {
                float input1;
                float input2;
                float output1;
                float output2;
            };
            RWStructuredBuffer&lt;SBinaryFPOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SBinaryFPOp l = g_buf[GI];
                l.output1 = l.input1 - l.input2;
                g_buf[GI] = l;
            }; </Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_2</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>0x007E0000</Value>
                <Value>0x007F0000</Value>
                <Value>0x00FF0000</Value>
                <Value>0x007A0000</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>0x007E0000</Value>
                <Value>0x807F0000</Value>
                <Value>0x00800000</Value>
                <Value>0</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>0x0</Value>
                <Value>0x00FE0000</Value>
                <Value>0</Value>
                <Value>0</Value>
            </Parameter>
            <Parameter Name="ShaderOp.Arguments">-denorm ftz</Parameter>
        </Row>
        <Row Name="FSubDenormPreserve">
            <Parameter Name="Validation.Type">ulp</Parameter>
            <Parameter Name="Validation.Tolerance">1</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SBinaryFPOp {
                float input1;
                float input2;
                float output1;
                float output2;
            };
            RWStructuredBuffer&lt;SBinaryFPOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SBinaryFPOp l = g_buf[GI];
                l.output1 = l.input1 - l.input2;
                g_buf[GI] = l;
            }; </Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_2</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>0x007E0000</Value>
                <Value>0x007F0000</Value>
                <Value>0x00FF0000</Value>
                <Value>0x007A0000</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>0x007E0000</Value>
                <Value>0x807F0000</Value>
                <Value>0x00800000</Value>
                <Value>0</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>0x0</Value>
                <Value>0x00FE0000</Value>
                <Value>0x007F0000</Value>
                <Value>0x007A0000</Value>
            </Parameter>
            <Parameter Name="ShaderOp.Arguments">-denorm preserve</Parameter>
        </Row>
        <Row Name="FSubDenormAny">
            <Parameter Name="Validation.Type">ulp</Parameter>
            <Parameter Name="Validation.Tolerance">1</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SBinaryFPOp {
                float input1;
                float input2;
                float output1;
                float output2;
            };
            RWStructuredBuffer&lt;SBinaryFPOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SBinaryFPOp l = g_buf[GI];
                l.output1 = l.input1 - l.input2;
                g_buf[GI] = l;
            }; </Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_2</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>0x007E0000</Value>
                <Value>0x007F0000</Value>
                <Value>0x00FF0000</Value>
                <Value>0x007A0000</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>0x007E0000</Value>
                <Value>0x807F0000</Value>
                <Value>0x00800000</Value>
                <Value>0</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>0x0</Value>
                <Value>0x00FE0000</Value>
                <Value>0x007F0000</Value>
                <Value>0x007A0000</Value>
            </Parameter>
            <Parameter Name="ShaderOp.Arguments">-denorm any</Parameter>
        </Row>
        <Row Name="FAddDenormFTZ">
            <Parameter Name="Validation.Type">ulp</Parameter>
            <Parameter Name="Validation.Tolerance">1</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SBinaryFPOp {
                float input1;
                float input2;
                float output1;
                float output2;
            };
            RWStructuredBuffer&lt;SBinaryFPOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SBinaryFPOp l = g_buf[GI];
                l.output1 = l.input1 + l.input2;
                g_buf[GI] = l;
            }; </Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_2</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>0x007E0000</Value>
                <Value>0x00200000</Value>
                <Value>0x007E0000</Value>
                <Value>0x007E0000</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>0x007E0000</Value>
                <Value>0x00200000</Value>
                <Value>0x807E0000</Value>
                <Value>0x800E0000</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>0x00FC0000</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>0</Value>
            </Parameter>
            <Parameter Name="ShaderOp.Arguments">-denorm ftz</Parameter>
        </Row>
        <Row Name="FAddDenormPreserve">
            <Parameter Name="Validation.Type">ulp</Parameter>
            <Parameter Name="Validation.Tolerance">1</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SBinaryFPOp {
                float input1;
                float input2;
                float output1;
                float output2;
            };
            RWStructuredBuffer&lt;SBinaryFPOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SBinaryFPOp l = g_buf[GI];
                l.output1 = l.input1 + l.input2;
                g_buf[GI] = l;
            }; </Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_2</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>0x007E0000</Value>
                <Value>0x00200000</Value>
                <Value>0x007E0000</Value>
                <Value>0x007E0000</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>0x007E0000</Value>
                <Value>0x00200000</Value>
                <Value>0x807E0000</Value>
                <Value>0x800E0000</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>0x00FC0000</Value>
                <Value>0</Value>
                <Value>0</Value>
                <Value>0x00700000</Value>
            </Parameter>
            <Parameter Name="ShaderOp.Arguments">-denorm preserve</Parameter>
        </Row>
        <Row Name="FMulDenormPreserve">
            <Parameter Name="Validation.Type">ulp</Parameter>
            <Parameter Name="Validation.Tolerance">1</Parameter>
            <Parameter Name="ShaderOp.Text"> struct SBinaryFPOp {
                float input1;
                float input2;
                float output1;
                float output2;
            };
            RWStructuredBuffer&lt;SBinaryFPOp&gt; g_buf : register(u0);
            [numthreads(8,8,1)]
            void main(uint GI : SV_GroupIndex) {
                SBinaryFPOp l = g_buf[GI];
                l.output1 = l.input1 * l.input2;
                g_buf[GI] = l;
            }; </Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_2</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>0x00000300</Value>
                <Value>0x007F0000</Value>
                <Value>0x007F0000</Value>
                <Value>0x001E0000</Value>
                <Value>0x00000300</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>128</Value>
                <Value>1</Value>
                <Value>0x007F0000</Value>
                <Value>20</Value>
                <Value>0x78000000</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>0x00018000</Value>
                <Value>0x007F0000</Value>
                <Value>0</Value>
                <Value>0x01960000</Value>
                <Value>0x32400000</Value>
            </Parameter>
            <Parameter Name="ShaderOp.Arguments">-denorm preserve</Parameter>
        </Row>
    </Table>
    <Table Id="DenormTertiaryFloatOpTable">
        <ParameterTypes>
            <ParameterType Name="ShaderOp.Target">String</ParameterType>
            <ParameterType Name="ShaderOp.Arguments">String</ParameterType>
            <ParameterType Name="ShaderOp.Text">String</ParameterType>
            <ParameterType Name="Validation.Type">String</ParameterType>
            <ParameterType Name="Validation.Tolerance">double</ParameterType>
            <ParameterType Array="true" Name="Validation.Input1">String</ParameterType>
            <ParameterType Array="true" Name="Validation.Input2">String</ParameterType>
            <ParameterType Array="true" Name="Validation.Input3">String</ParameterType>
            <ParameterType Array="true" Name="Validation.Expected1">String</ParameterType>
        </ParameterTypes>
        <Row Name="FMadDenormPreserve">
            <Parameter Name="Validation.Type">epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0.0008</Parameter>
            <Parameter Name="ShaderOp.Text"> struct STertiaryFloatOp {
                    float input1;
                    float input2;
                    float input3;
                    float output;
                };
                RWStructuredBuffer&lt;STertiaryFloatOp&gt; g_buf : register(u0);
                [numthreads(8,8,1)]
                void main(uint GI : SV_GroupIndex) {
                    STertiaryFloatOp l = g_buf[GI];
                    l.output = mad(l.input1, l.input2, l.input3);
                    g_buf[GI] = l;
                };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_2</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>0x80780000</Value>
                <Value>0x80780000</Value>
                <Value>0x00780000</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>1</Value>
                <Value>2</Value>
                <Value>2</Value>
            </Parameter>
            <Parameter Name="Validation.Input3">
                <Value>0x80780000</Value>
                <Value>0x00800000</Value>
                <Value>0x00800000</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>0x80780000</Value>
                <Value>0x80700000</Value>
                <Value>0x01380000</Value>
            </Parameter>
            <Parameter Name="ShaderOp.Arguments">-denorm preserve</Parameter>
        </Row>
        <Row Name="FMadDenormAny">
            <Parameter Name="Validation.Type">epsilon</Parameter>
            <Parameter Name="Validation.Tolerance">0.0008</Parameter>
            <Parameter Name="ShaderOp.Text"> struct STertiaryFloatOp {
                    float input1;
                    float input2;
                    float input3;
                    float output;
                };
                RWStructuredBuffer&lt;STertiaryFloatOp&gt; g_buf : register(u0);
                [numthreads(8,8,1)]
                void main(uint GI : SV_GroupIndex) {
                    STertiaryFloatOp l = g_buf[GI];
                    l.output = mad(l.input1, l.input2, l.input3);
                    g_buf[GI] = l;
                };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_2</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>0x80780000</Value>
                <Value>0x80780000</Value>
                <Value>0x00780000</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>1</Value>
                <Value>2</Value>
                <Value>2</Value>
            </Parameter>
            <Parameter Name="Validation.Input3">
                <Value>0x80780000</Value>
                <Value>0x00800000</Value>
                <Value>0x00800000</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>0x80780000</Value>
                <Value>0x80700000</Value>
                <Value>0x01380000</Value>
            </Parameter>
            <Parameter Name="ShaderOp.Arguments">-denorm any</Parameter>
        </Row>
        <Row Name="FMadDenormFTZ">
            <Parameter Name="Validation.Type">ulp</Parameter>
            <Parameter Name="Validation.Tolerance">1</Parameter>
            <Parameter Name="ShaderOp.Text"> struct STertiaryFloatOp {
                    float input1;
                    float input2;
                    float input3;
                    float output;
                };
                RWStructuredBuffer&lt;STertiaryFloatOp&gt; g_buf : register(u0);
                [numthreads(8,8,1)]
                void main(uint GI : SV_GroupIndex) {
                    STertiaryFloatOp l = g_buf[GI];
                    l.output = mad(l.input1, l.input2, l.input3);
                    g_buf[GI] = l;
                };</Parameter>
            <Parameter Name="ShaderOp.Target">cs_6_2</Parameter>
            <Parameter Name="Validation.Input1">
                <Value>0x80780000</Value>
                <Value>0x80780000</Value>
                <Value>0x00780000</Value>
            </Parameter>
            <Parameter Name="Validation.Input2">
                <Value>1</Value>
                <Value>2</Value>
                <Value>2</Value>
            </Parameter>
            <Parameter Name="Validation.Input3">
                <Value>0x80780000</Value>
                <Value>0x00800000</Value>
                <Value>0x00800000</Value>
            </Parameter>
            <Parameter Name="Validation.Expected1">
                <Value>0</Value>
                <Value>0</Value>
                <Value>0x01380000</Value>
            </Parameter>
            <Parameter Name="ShaderOp.Arguments">-denorm ftz</Parameter>
        </Row>
    </Table>
</Data>